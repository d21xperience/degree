// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: sekolah.proto

package sekolah

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TahunAjaranService_CreateTahunAjaran_FullMethodName = "/sekolah.TahunAjaranService/CreateTahunAjaran"
	TahunAjaranService_GetTahunAjaran_FullMethodName    = "/sekolah.TahunAjaranService/GetTahunAjaran"
	TahunAjaranService_UpdateTahunAjaran_FullMethodName = "/sekolah.TahunAjaranService/UpdateTahunAjaran"
	TahunAjaranService_DeleteTahunAjaran_FullMethodName = "/sekolah.TahunAjaranService/DeleteTahunAjaran"
)

// TahunAjaranServiceClient is the client API for TahunAjaranService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =============================================
// Generated Tahun Ajaran
// =============================================
type TahunAjaranServiceClient interface {
	// CRUD for TahunAjaran
	CreateTahunAjaran(ctx context.Context, in *CreateTahunAjaranRequest, opts ...grpc.CallOption) (*CreateTahunAjaranResponse, error)
	GetTahunAjaran(ctx context.Context, in *GetTahunAjaranRequest, opts ...grpc.CallOption) (*GetTahunAjaranResponse, error)
	UpdateTahunAjaran(ctx context.Context, in *UpdateTahunAjaranRequest, opts ...grpc.CallOption) (*UpdateTahunAjaranResponse, error)
	DeleteTahunAjaran(ctx context.Context, in *DeleteTahunAjaranRequest, opts ...grpc.CallOption) (*DeleteTahunAjaranResponse, error)
}

type tahunAjaranServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTahunAjaranServiceClient(cc grpc.ClientConnInterface) TahunAjaranServiceClient {
	return &tahunAjaranServiceClient{cc}
}

func (c *tahunAjaranServiceClient) CreateTahunAjaran(ctx context.Context, in *CreateTahunAjaranRequest, opts ...grpc.CallOption) (*CreateTahunAjaranResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTahunAjaranResponse)
	err := c.cc.Invoke(ctx, TahunAjaranService_CreateTahunAjaran_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tahunAjaranServiceClient) GetTahunAjaran(ctx context.Context, in *GetTahunAjaranRequest, opts ...grpc.CallOption) (*GetTahunAjaranResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTahunAjaranResponse)
	err := c.cc.Invoke(ctx, TahunAjaranService_GetTahunAjaran_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tahunAjaranServiceClient) UpdateTahunAjaran(ctx context.Context, in *UpdateTahunAjaranRequest, opts ...grpc.CallOption) (*UpdateTahunAjaranResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTahunAjaranResponse)
	err := c.cc.Invoke(ctx, TahunAjaranService_UpdateTahunAjaran_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tahunAjaranServiceClient) DeleteTahunAjaran(ctx context.Context, in *DeleteTahunAjaranRequest, opts ...grpc.CallOption) (*DeleteTahunAjaranResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTahunAjaranResponse)
	err := c.cc.Invoke(ctx, TahunAjaranService_DeleteTahunAjaran_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TahunAjaranServiceServer is the server API for TahunAjaranService service.
// All implementations must embed UnimplementedTahunAjaranServiceServer
// for forward compatibility.
//
// =============================================
// Generated Tahun Ajaran
// =============================================
type TahunAjaranServiceServer interface {
	// CRUD for TahunAjaran
	CreateTahunAjaran(context.Context, *CreateTahunAjaranRequest) (*CreateTahunAjaranResponse, error)
	GetTahunAjaran(context.Context, *GetTahunAjaranRequest) (*GetTahunAjaranResponse, error)
	UpdateTahunAjaran(context.Context, *UpdateTahunAjaranRequest) (*UpdateTahunAjaranResponse, error)
	DeleteTahunAjaran(context.Context, *DeleteTahunAjaranRequest) (*DeleteTahunAjaranResponse, error)
	mustEmbedUnimplementedTahunAjaranServiceServer()
}

// UnimplementedTahunAjaranServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTahunAjaranServiceServer struct{}

func (UnimplementedTahunAjaranServiceServer) CreateTahunAjaran(context.Context, *CreateTahunAjaranRequest) (*CreateTahunAjaranResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTahunAjaran not implemented")
}
func (UnimplementedTahunAjaranServiceServer) GetTahunAjaran(context.Context, *GetTahunAjaranRequest) (*GetTahunAjaranResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTahunAjaran not implemented")
}
func (UnimplementedTahunAjaranServiceServer) UpdateTahunAjaran(context.Context, *UpdateTahunAjaranRequest) (*UpdateTahunAjaranResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTahunAjaran not implemented")
}
func (UnimplementedTahunAjaranServiceServer) DeleteTahunAjaran(context.Context, *DeleteTahunAjaranRequest) (*DeleteTahunAjaranResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTahunAjaran not implemented")
}
func (UnimplementedTahunAjaranServiceServer) mustEmbedUnimplementedTahunAjaranServiceServer() {}
func (UnimplementedTahunAjaranServiceServer) testEmbeddedByValue()                            {}

// UnsafeTahunAjaranServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TahunAjaranServiceServer will
// result in compilation errors.
type UnsafeTahunAjaranServiceServer interface {
	mustEmbedUnimplementedTahunAjaranServiceServer()
}

func RegisterTahunAjaranServiceServer(s grpc.ServiceRegistrar, srv TahunAjaranServiceServer) {
	// If the following call pancis, it indicates UnimplementedTahunAjaranServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TahunAjaranService_ServiceDesc, srv)
}

func _TahunAjaranService_CreateTahunAjaran_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTahunAjaranRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TahunAjaranServiceServer).CreateTahunAjaran(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TahunAjaranService_CreateTahunAjaran_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TahunAjaranServiceServer).CreateTahunAjaran(ctx, req.(*CreateTahunAjaranRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TahunAjaranService_GetTahunAjaran_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTahunAjaranRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TahunAjaranServiceServer).GetTahunAjaran(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TahunAjaranService_GetTahunAjaran_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TahunAjaranServiceServer).GetTahunAjaran(ctx, req.(*GetTahunAjaranRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TahunAjaranService_UpdateTahunAjaran_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTahunAjaranRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TahunAjaranServiceServer).UpdateTahunAjaran(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TahunAjaranService_UpdateTahunAjaran_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TahunAjaranServiceServer).UpdateTahunAjaran(ctx, req.(*UpdateTahunAjaranRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TahunAjaranService_DeleteTahunAjaran_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTahunAjaranRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TahunAjaranServiceServer).DeleteTahunAjaran(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TahunAjaranService_DeleteTahunAjaran_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TahunAjaranServiceServer).DeleteTahunAjaran(ctx, req.(*DeleteTahunAjaranRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TahunAjaranService_ServiceDesc is the grpc.ServiceDesc for TahunAjaranService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TahunAjaranService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.TahunAjaranService",
	HandlerType: (*TahunAjaranServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTahunAjaran",
			Handler:    _TahunAjaranService_CreateTahunAjaran_Handler,
		},
		{
			MethodName: "GetTahunAjaran",
			Handler:    _TahunAjaranService_GetTahunAjaran_Handler,
		},
		{
			MethodName: "UpdateTahunAjaran",
			Handler:    _TahunAjaranService_UpdateTahunAjaran_Handler,
		},
		{
			MethodName: "DeleteTahunAjaran",
			Handler:    _TahunAjaranService_DeleteTahunAjaran_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	SemesterService_CreateSemester_FullMethodName     = "/sekolah.SemesterService/CreateSemester"
	SemesterService_GetSemester_FullMethodName        = "/sekolah.SemesterService/GetSemester"
	SemesterService_GetCurrentSemester_FullMethodName = "/sekolah.SemesterService/GetCurrentSemester"
	SemesterService_UpdateSemester_FullMethodName     = "/sekolah.SemesterService/UpdateSemester"
	SemesterService_DeleteSemester_FullMethodName     = "/sekolah.SemesterService/DeleteSemester"
)

// SemesterServiceClient is the client API for SemesterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SemesterServiceClient interface {
	// CRUD for Semester
	CreateSemester(ctx context.Context, in *CreateSemesterRequest, opts ...grpc.CallOption) (*CreateSemesterResponse, error)
	GetSemester(ctx context.Context, in *GetSemesterRequest, opts ...grpc.CallOption) (*GetSemesterResponse, error)
	GetCurrentSemester(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCurrentSemesterResponse, error)
	UpdateSemester(ctx context.Context, in *UpdateSemesterRequest, opts ...grpc.CallOption) (*UpdateSemesterResponse, error)
	DeleteSemester(ctx context.Context, in *DeleteSemesterRequest, opts ...grpc.CallOption) (*DeleteSemesterResponse, error)
}

type semesterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSemesterServiceClient(cc grpc.ClientConnInterface) SemesterServiceClient {
	return &semesterServiceClient{cc}
}

func (c *semesterServiceClient) CreateSemester(ctx context.Context, in *CreateSemesterRequest, opts ...grpc.CallOption) (*CreateSemesterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSemesterResponse)
	err := c.cc.Invoke(ctx, SemesterService_CreateSemester_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *semesterServiceClient) GetSemester(ctx context.Context, in *GetSemesterRequest, opts ...grpc.CallOption) (*GetSemesterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSemesterResponse)
	err := c.cc.Invoke(ctx, SemesterService_GetSemester_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *semesterServiceClient) GetCurrentSemester(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCurrentSemesterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentSemesterResponse)
	err := c.cc.Invoke(ctx, SemesterService_GetCurrentSemester_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *semesterServiceClient) UpdateSemester(ctx context.Context, in *UpdateSemesterRequest, opts ...grpc.CallOption) (*UpdateSemesterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSemesterResponse)
	err := c.cc.Invoke(ctx, SemesterService_UpdateSemester_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *semesterServiceClient) DeleteSemester(ctx context.Context, in *DeleteSemesterRequest, opts ...grpc.CallOption) (*DeleteSemesterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSemesterResponse)
	err := c.cc.Invoke(ctx, SemesterService_DeleteSemester_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SemesterServiceServer is the server API for SemesterService service.
// All implementations must embed UnimplementedSemesterServiceServer
// for forward compatibility.
type SemesterServiceServer interface {
	// CRUD for Semester
	CreateSemester(context.Context, *CreateSemesterRequest) (*CreateSemesterResponse, error)
	GetSemester(context.Context, *GetSemesterRequest) (*GetSemesterResponse, error)
	GetCurrentSemester(context.Context, *Empty) (*GetCurrentSemesterResponse, error)
	UpdateSemester(context.Context, *UpdateSemesterRequest) (*UpdateSemesterResponse, error)
	DeleteSemester(context.Context, *DeleteSemesterRequest) (*DeleteSemesterResponse, error)
	mustEmbedUnimplementedSemesterServiceServer()
}

// UnimplementedSemesterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSemesterServiceServer struct{}

func (UnimplementedSemesterServiceServer) CreateSemester(context.Context, *CreateSemesterRequest) (*CreateSemesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSemester not implemented")
}
func (UnimplementedSemesterServiceServer) GetSemester(context.Context, *GetSemesterRequest) (*GetSemesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSemester not implemented")
}
func (UnimplementedSemesterServiceServer) GetCurrentSemester(context.Context, *Empty) (*GetCurrentSemesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentSemester not implemented")
}
func (UnimplementedSemesterServiceServer) UpdateSemester(context.Context, *UpdateSemesterRequest) (*UpdateSemesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSemester not implemented")
}
func (UnimplementedSemesterServiceServer) DeleteSemester(context.Context, *DeleteSemesterRequest) (*DeleteSemesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSemester not implemented")
}
func (UnimplementedSemesterServiceServer) mustEmbedUnimplementedSemesterServiceServer() {}
func (UnimplementedSemesterServiceServer) testEmbeddedByValue()                         {}

// UnsafeSemesterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SemesterServiceServer will
// result in compilation errors.
type UnsafeSemesterServiceServer interface {
	mustEmbedUnimplementedSemesterServiceServer()
}

func RegisterSemesterServiceServer(s grpc.ServiceRegistrar, srv SemesterServiceServer) {
	// If the following call pancis, it indicates UnimplementedSemesterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SemesterService_ServiceDesc, srv)
}

func _SemesterService_CreateSemester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSemesterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemesterServiceServer).CreateSemester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SemesterService_CreateSemester_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemesterServiceServer).CreateSemester(ctx, req.(*CreateSemesterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SemesterService_GetSemester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSemesterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemesterServiceServer).GetSemester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SemesterService_GetSemester_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemesterServiceServer).GetSemester(ctx, req.(*GetSemesterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SemesterService_GetCurrentSemester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemesterServiceServer).GetCurrentSemester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SemesterService_GetCurrentSemester_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemesterServiceServer).GetCurrentSemester(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SemesterService_UpdateSemester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSemesterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemesterServiceServer).UpdateSemester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SemesterService_UpdateSemester_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemesterServiceServer).UpdateSemester(ctx, req.(*UpdateSemesterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SemesterService_DeleteSemester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSemesterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemesterServiceServer).DeleteSemester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SemesterService_DeleteSemester_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemesterServiceServer).DeleteSemester(ctx, req.(*DeleteSemesterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SemesterService_ServiceDesc is the grpc.ServiceDesc for SemesterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SemesterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.SemesterService",
	HandlerType: (*SemesterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSemester",
			Handler:    _SemesterService_CreateSemester_Handler,
		},
		{
			MethodName: "GetSemester",
			Handler:    _SemesterService_GetSemester_Handler,
		},
		{
			MethodName: "GetCurrentSemester",
			Handler:    _SemesterService_GetCurrentSemester_Handler,
		},
		{
			MethodName: "UpdateSemester",
			Handler:    _SemesterService_UpdateSemester_Handler,
		},
		{
			MethodName: "DeleteSemester",
			Handler:    _SemesterService_DeleteSemester_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	SekolahService_GetSchoolInfo_FullMethodName                 = "/sekolah.SekolahService/GetSchoolInfo"
	SekolahService_RegistrasiSekolah_FullMethodName             = "/sekolah.SekolahService/RegistrasiSekolah"
	SekolahService_GetSekolahTenant_FullMethodName              = "/sekolah.SekolahService/GetSekolahTenant"
	SekolahService_CreateSekolah_FullMethodName                 = "/sekolah.SekolahService/CreateSekolah"
	SekolahService_GetSekolah_FullMethodName                    = "/sekolah.SekolahService/GetSekolah"
	SekolahService_UpdateSekolah_FullMethodName                 = "/sekolah.SekolahService/UpdateSekolah"
	SekolahService_CreateKategoriSekolah_FullMethodName         = "/sekolah.SekolahService/CreateKategoriSekolah"
	SekolahService_UpdateKategoriSekolah_FullMethodName         = "/sekolah.SekolahService/UpdateKategoriSekolah"
	SekolahService_GetKategoriSekolah_FullMethodName            = "/sekolah.SekolahService/GetKategoriSekolah"
	SekolahService_DeleteKategoriSekolah_FullMethodName         = "/sekolah.SekolahService/DeleteKategoriSekolah"
	SekolahService_ProsesKategoriSekolahDanKelas_FullMethodName = "/sekolah.SekolahService/ProsesKategoriSekolahDanKelas"
	SekolahService_CreateKategoriMapel_FullMethodName           = "/sekolah.SekolahService/CreateKategoriMapel"
	SekolahService_UpdateKategoriMapel_FullMethodName           = "/sekolah.SekolahService/UpdateKategoriMapel"
	SekolahService_GetKategoriMapel_FullMethodName              = "/sekolah.SekolahService/GetKategoriMapel"
	SekolahService_DeleteKategoriMapel_FullMethodName           = "/sekolah.SekolahService/DeleteKategoriMapel"
	SekolahService_BatchDeleteKategoriMapel_FullMethodName      = "/sekolah.SekolahService/BatchDeleteKategoriMapel"
)

// SekolahServiceClient is the client API for SekolahService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SekolahServiceClient interface {
	GetSchoolInfo(ctx context.Context, in *SchoolRequest, opts ...grpc.CallOption) (*SchoolResponse, error)
	RegistrasiSekolah(ctx context.Context, in *TabelSekolahRequest, opts ...grpc.CallOption) (*TabelSekolahResponse, error)
	GetSekolahTenant(ctx context.Context, in *SekolahTenantRequest, opts ...grpc.CallOption) (*SekolahTenantResponse, error)
	// // CRUD for Sekolah
	CreateSekolah(ctx context.Context, in *CreateSekolahRequest, opts ...grpc.CallOption) (*CreateSekolahResponse, error)
	GetSekolah(ctx context.Context, in *GetSekolahRequest, opts ...grpc.CallOption) (*GetSekolahResponse, error)
	UpdateSekolah(ctx context.Context, in *UpdateSekolahRequest, opts ...grpc.CallOption) (*UpdateSekolahResponse, error)
	// ====================================
	// KATEGORI SEKOLAH
	// ====================================
	CreateKategoriSekolah(ctx context.Context, in *CreateKategoriSekolahRequest, opts ...grpc.CallOption) (*CreateKategoriSekolahResponse, error)
	UpdateKategoriSekolah(ctx context.Context, in *UpdateKategoriSekolahRequest, opts ...grpc.CallOption) (*UpdateKategoriSekolahResponse, error)
	GetKategoriSekolah(ctx context.Context, in *GetKategoriSekolahRequest, opts ...grpc.CallOption) (*GetKategoriSekolahResponse, error)
	DeleteKategoriSekolah(ctx context.Context, in *DeleteKategoriSekolahRequest, opts ...grpc.CallOption) (*DeleteKategoriSekolahResponse, error)
	// ====================================
	// PROSES KATEGORI SEKOLAH & KELAS --FUNGSI UNTUK MEMBUAT KELAS BERDASARAKAN KATEGORI KELAS DAN SEKOLAH
	// ====================================
	ProsesKategoriSekolahDanKelas(ctx context.Context, in *ProsesKategoriSekolahDanKelasRequest, opts ...grpc.CallOption) (*ProsesKategoriSekolahDanKelasResponse, error)
	// ====================================
	// KATEGORI SEKOLAH MAPEL
	// ====================================
	CreateKategoriMapel(ctx context.Context, in *CreateKategoriMapelRequest, opts ...grpc.CallOption) (*CreateKategoriMapelResponse, error)
	UpdateKategoriMapel(ctx context.Context, in *UpdateKategoriMapelRequest, opts ...grpc.CallOption) (*UpdateKategoriMapelResponse, error)
	GetKategoriMapel(ctx context.Context, in *GetKategoriMapelRequest, opts ...grpc.CallOption) (*GetKategoriMapelResponse, error)
	DeleteKategoriMapel(ctx context.Context, in *DeleteKategoriMapelRequest, opts ...grpc.CallOption) (*DeleteKategoriMapelResponse, error)
	BatchDeleteKategoriMapel(ctx context.Context, in *BatchDeleteKategoriMapelRequest, opts ...grpc.CallOption) (*BatchDeleteKategoriMapelResponse, error)
}

type sekolahServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSekolahServiceClient(cc grpc.ClientConnInterface) SekolahServiceClient {
	return &sekolahServiceClient{cc}
}

func (c *sekolahServiceClient) GetSchoolInfo(ctx context.Context, in *SchoolRequest, opts ...grpc.CallOption) (*SchoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SchoolResponse)
	err := c.cc.Invoke(ctx, SekolahService_GetSchoolInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sekolahServiceClient) RegistrasiSekolah(ctx context.Context, in *TabelSekolahRequest, opts ...grpc.CallOption) (*TabelSekolahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TabelSekolahResponse)
	err := c.cc.Invoke(ctx, SekolahService_RegistrasiSekolah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sekolahServiceClient) GetSekolahTenant(ctx context.Context, in *SekolahTenantRequest, opts ...grpc.CallOption) (*SekolahTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SekolahTenantResponse)
	err := c.cc.Invoke(ctx, SekolahService_GetSekolahTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sekolahServiceClient) CreateSekolah(ctx context.Context, in *CreateSekolahRequest, opts ...grpc.CallOption) (*CreateSekolahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSekolahResponse)
	err := c.cc.Invoke(ctx, SekolahService_CreateSekolah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sekolahServiceClient) GetSekolah(ctx context.Context, in *GetSekolahRequest, opts ...grpc.CallOption) (*GetSekolahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSekolahResponse)
	err := c.cc.Invoke(ctx, SekolahService_GetSekolah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sekolahServiceClient) UpdateSekolah(ctx context.Context, in *UpdateSekolahRequest, opts ...grpc.CallOption) (*UpdateSekolahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSekolahResponse)
	err := c.cc.Invoke(ctx, SekolahService_UpdateSekolah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sekolahServiceClient) CreateKategoriSekolah(ctx context.Context, in *CreateKategoriSekolahRequest, opts ...grpc.CallOption) (*CreateKategoriSekolahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKategoriSekolahResponse)
	err := c.cc.Invoke(ctx, SekolahService_CreateKategoriSekolah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sekolahServiceClient) UpdateKategoriSekolah(ctx context.Context, in *UpdateKategoriSekolahRequest, opts ...grpc.CallOption) (*UpdateKategoriSekolahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateKategoriSekolahResponse)
	err := c.cc.Invoke(ctx, SekolahService_UpdateKategoriSekolah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sekolahServiceClient) GetKategoriSekolah(ctx context.Context, in *GetKategoriSekolahRequest, opts ...grpc.CallOption) (*GetKategoriSekolahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKategoriSekolahResponse)
	err := c.cc.Invoke(ctx, SekolahService_GetKategoriSekolah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sekolahServiceClient) DeleteKategoriSekolah(ctx context.Context, in *DeleteKategoriSekolahRequest, opts ...grpc.CallOption) (*DeleteKategoriSekolahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteKategoriSekolahResponse)
	err := c.cc.Invoke(ctx, SekolahService_DeleteKategoriSekolah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sekolahServiceClient) ProsesKategoriSekolahDanKelas(ctx context.Context, in *ProsesKategoriSekolahDanKelasRequest, opts ...grpc.CallOption) (*ProsesKategoriSekolahDanKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProsesKategoriSekolahDanKelasResponse)
	err := c.cc.Invoke(ctx, SekolahService_ProsesKategoriSekolahDanKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sekolahServiceClient) CreateKategoriMapel(ctx context.Context, in *CreateKategoriMapelRequest, opts ...grpc.CallOption) (*CreateKategoriMapelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKategoriMapelResponse)
	err := c.cc.Invoke(ctx, SekolahService_CreateKategoriMapel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sekolahServiceClient) UpdateKategoriMapel(ctx context.Context, in *UpdateKategoriMapelRequest, opts ...grpc.CallOption) (*UpdateKategoriMapelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateKategoriMapelResponse)
	err := c.cc.Invoke(ctx, SekolahService_UpdateKategoriMapel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sekolahServiceClient) GetKategoriMapel(ctx context.Context, in *GetKategoriMapelRequest, opts ...grpc.CallOption) (*GetKategoriMapelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKategoriMapelResponse)
	err := c.cc.Invoke(ctx, SekolahService_GetKategoriMapel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sekolahServiceClient) DeleteKategoriMapel(ctx context.Context, in *DeleteKategoriMapelRequest, opts ...grpc.CallOption) (*DeleteKategoriMapelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteKategoriMapelResponse)
	err := c.cc.Invoke(ctx, SekolahService_DeleteKategoriMapel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sekolahServiceClient) BatchDeleteKategoriMapel(ctx context.Context, in *BatchDeleteKategoriMapelRequest, opts ...grpc.CallOption) (*BatchDeleteKategoriMapelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchDeleteKategoriMapelResponse)
	err := c.cc.Invoke(ctx, SekolahService_BatchDeleteKategoriMapel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SekolahServiceServer is the server API for SekolahService service.
// All implementations must embed UnimplementedSekolahServiceServer
// for forward compatibility.
type SekolahServiceServer interface {
	GetSchoolInfo(context.Context, *SchoolRequest) (*SchoolResponse, error)
	RegistrasiSekolah(context.Context, *TabelSekolahRequest) (*TabelSekolahResponse, error)
	GetSekolahTenant(context.Context, *SekolahTenantRequest) (*SekolahTenantResponse, error)
	// // CRUD for Sekolah
	CreateSekolah(context.Context, *CreateSekolahRequest) (*CreateSekolahResponse, error)
	GetSekolah(context.Context, *GetSekolahRequest) (*GetSekolahResponse, error)
	UpdateSekolah(context.Context, *UpdateSekolahRequest) (*UpdateSekolahResponse, error)
	// ====================================
	// KATEGORI SEKOLAH
	// ====================================
	CreateKategoriSekolah(context.Context, *CreateKategoriSekolahRequest) (*CreateKategoriSekolahResponse, error)
	UpdateKategoriSekolah(context.Context, *UpdateKategoriSekolahRequest) (*UpdateKategoriSekolahResponse, error)
	GetKategoriSekolah(context.Context, *GetKategoriSekolahRequest) (*GetKategoriSekolahResponse, error)
	DeleteKategoriSekolah(context.Context, *DeleteKategoriSekolahRequest) (*DeleteKategoriSekolahResponse, error)
	// ====================================
	// PROSES KATEGORI SEKOLAH & KELAS --FUNGSI UNTUK MEMBUAT KELAS BERDASARAKAN KATEGORI KELAS DAN SEKOLAH
	// ====================================
	ProsesKategoriSekolahDanKelas(context.Context, *ProsesKategoriSekolahDanKelasRequest) (*ProsesKategoriSekolahDanKelasResponse, error)
	// ====================================
	// KATEGORI SEKOLAH MAPEL
	// ====================================
	CreateKategoriMapel(context.Context, *CreateKategoriMapelRequest) (*CreateKategoriMapelResponse, error)
	UpdateKategoriMapel(context.Context, *UpdateKategoriMapelRequest) (*UpdateKategoriMapelResponse, error)
	GetKategoriMapel(context.Context, *GetKategoriMapelRequest) (*GetKategoriMapelResponse, error)
	DeleteKategoriMapel(context.Context, *DeleteKategoriMapelRequest) (*DeleteKategoriMapelResponse, error)
	BatchDeleteKategoriMapel(context.Context, *BatchDeleteKategoriMapelRequest) (*BatchDeleteKategoriMapelResponse, error)
	mustEmbedUnimplementedSekolahServiceServer()
}

// UnimplementedSekolahServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSekolahServiceServer struct{}

func (UnimplementedSekolahServiceServer) GetSchoolInfo(context.Context, *SchoolRequest) (*SchoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchoolInfo not implemented")
}
func (UnimplementedSekolahServiceServer) RegistrasiSekolah(context.Context, *TabelSekolahRequest) (*TabelSekolahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrasiSekolah not implemented")
}
func (UnimplementedSekolahServiceServer) GetSekolahTenant(context.Context, *SekolahTenantRequest) (*SekolahTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSekolahTenant not implemented")
}
func (UnimplementedSekolahServiceServer) CreateSekolah(context.Context, *CreateSekolahRequest) (*CreateSekolahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSekolah not implemented")
}
func (UnimplementedSekolahServiceServer) GetSekolah(context.Context, *GetSekolahRequest) (*GetSekolahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSekolah not implemented")
}
func (UnimplementedSekolahServiceServer) UpdateSekolah(context.Context, *UpdateSekolahRequest) (*UpdateSekolahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSekolah not implemented")
}
func (UnimplementedSekolahServiceServer) CreateKategoriSekolah(context.Context, *CreateKategoriSekolahRequest) (*CreateKategoriSekolahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKategoriSekolah not implemented")
}
func (UnimplementedSekolahServiceServer) UpdateKategoriSekolah(context.Context, *UpdateKategoriSekolahRequest) (*UpdateKategoriSekolahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKategoriSekolah not implemented")
}
func (UnimplementedSekolahServiceServer) GetKategoriSekolah(context.Context, *GetKategoriSekolahRequest) (*GetKategoriSekolahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKategoriSekolah not implemented")
}
func (UnimplementedSekolahServiceServer) DeleteKategoriSekolah(context.Context, *DeleteKategoriSekolahRequest) (*DeleteKategoriSekolahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKategoriSekolah not implemented")
}
func (UnimplementedSekolahServiceServer) ProsesKategoriSekolahDanKelas(context.Context, *ProsesKategoriSekolahDanKelasRequest) (*ProsesKategoriSekolahDanKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProsesKategoriSekolahDanKelas not implemented")
}
func (UnimplementedSekolahServiceServer) CreateKategoriMapel(context.Context, *CreateKategoriMapelRequest) (*CreateKategoriMapelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKategoriMapel not implemented")
}
func (UnimplementedSekolahServiceServer) UpdateKategoriMapel(context.Context, *UpdateKategoriMapelRequest) (*UpdateKategoriMapelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKategoriMapel not implemented")
}
func (UnimplementedSekolahServiceServer) GetKategoriMapel(context.Context, *GetKategoriMapelRequest) (*GetKategoriMapelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKategoriMapel not implemented")
}
func (UnimplementedSekolahServiceServer) DeleteKategoriMapel(context.Context, *DeleteKategoriMapelRequest) (*DeleteKategoriMapelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKategoriMapel not implemented")
}
func (UnimplementedSekolahServiceServer) BatchDeleteKategoriMapel(context.Context, *BatchDeleteKategoriMapelRequest) (*BatchDeleteKategoriMapelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteKategoriMapel not implemented")
}
func (UnimplementedSekolahServiceServer) mustEmbedUnimplementedSekolahServiceServer() {}
func (UnimplementedSekolahServiceServer) testEmbeddedByValue()                        {}

// UnsafeSekolahServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SekolahServiceServer will
// result in compilation errors.
type UnsafeSekolahServiceServer interface {
	mustEmbedUnimplementedSekolahServiceServer()
}

func RegisterSekolahServiceServer(s grpc.ServiceRegistrar, srv SekolahServiceServer) {
	// If the following call pancis, it indicates UnimplementedSekolahServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SekolahService_ServiceDesc, srv)
}

func _SekolahService_GetSchoolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SekolahServiceServer).GetSchoolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SekolahService_GetSchoolInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SekolahServiceServer).GetSchoolInfo(ctx, req.(*SchoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SekolahService_RegistrasiSekolah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TabelSekolahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SekolahServiceServer).RegistrasiSekolah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SekolahService_RegistrasiSekolah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SekolahServiceServer).RegistrasiSekolah(ctx, req.(*TabelSekolahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SekolahService_GetSekolahTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SekolahTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SekolahServiceServer).GetSekolahTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SekolahService_GetSekolahTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SekolahServiceServer).GetSekolahTenant(ctx, req.(*SekolahTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SekolahService_CreateSekolah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSekolahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SekolahServiceServer).CreateSekolah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SekolahService_CreateSekolah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SekolahServiceServer).CreateSekolah(ctx, req.(*CreateSekolahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SekolahService_GetSekolah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSekolahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SekolahServiceServer).GetSekolah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SekolahService_GetSekolah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SekolahServiceServer).GetSekolah(ctx, req.(*GetSekolahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SekolahService_UpdateSekolah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSekolahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SekolahServiceServer).UpdateSekolah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SekolahService_UpdateSekolah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SekolahServiceServer).UpdateSekolah(ctx, req.(*UpdateSekolahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SekolahService_CreateKategoriSekolah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKategoriSekolahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SekolahServiceServer).CreateKategoriSekolah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SekolahService_CreateKategoriSekolah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SekolahServiceServer).CreateKategoriSekolah(ctx, req.(*CreateKategoriSekolahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SekolahService_UpdateKategoriSekolah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKategoriSekolahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SekolahServiceServer).UpdateKategoriSekolah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SekolahService_UpdateKategoriSekolah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SekolahServiceServer).UpdateKategoriSekolah(ctx, req.(*UpdateKategoriSekolahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SekolahService_GetKategoriSekolah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKategoriSekolahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SekolahServiceServer).GetKategoriSekolah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SekolahService_GetKategoriSekolah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SekolahServiceServer).GetKategoriSekolah(ctx, req.(*GetKategoriSekolahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SekolahService_DeleteKategoriSekolah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKategoriSekolahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SekolahServiceServer).DeleteKategoriSekolah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SekolahService_DeleteKategoriSekolah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SekolahServiceServer).DeleteKategoriSekolah(ctx, req.(*DeleteKategoriSekolahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SekolahService_ProsesKategoriSekolahDanKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProsesKategoriSekolahDanKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SekolahServiceServer).ProsesKategoriSekolahDanKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SekolahService_ProsesKategoriSekolahDanKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SekolahServiceServer).ProsesKategoriSekolahDanKelas(ctx, req.(*ProsesKategoriSekolahDanKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SekolahService_CreateKategoriMapel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKategoriMapelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SekolahServiceServer).CreateKategoriMapel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SekolahService_CreateKategoriMapel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SekolahServiceServer).CreateKategoriMapel(ctx, req.(*CreateKategoriMapelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SekolahService_UpdateKategoriMapel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKategoriMapelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SekolahServiceServer).UpdateKategoriMapel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SekolahService_UpdateKategoriMapel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SekolahServiceServer).UpdateKategoriMapel(ctx, req.(*UpdateKategoriMapelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SekolahService_GetKategoriMapel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKategoriMapelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SekolahServiceServer).GetKategoriMapel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SekolahService_GetKategoriMapel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SekolahServiceServer).GetKategoriMapel(ctx, req.(*GetKategoriMapelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SekolahService_DeleteKategoriMapel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKategoriMapelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SekolahServiceServer).DeleteKategoriMapel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SekolahService_DeleteKategoriMapel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SekolahServiceServer).DeleteKategoriMapel(ctx, req.(*DeleteKategoriMapelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SekolahService_BatchDeleteKategoriMapel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteKategoriMapelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SekolahServiceServer).BatchDeleteKategoriMapel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SekolahService_BatchDeleteKategoriMapel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SekolahServiceServer).BatchDeleteKategoriMapel(ctx, req.(*BatchDeleteKategoriMapelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SekolahService_ServiceDesc is the grpc.ServiceDesc for SekolahService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SekolahService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.SekolahService",
	HandlerType: (*SekolahServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSchoolInfo",
			Handler:    _SekolahService_GetSchoolInfo_Handler,
		},
		{
			MethodName: "RegistrasiSekolah",
			Handler:    _SekolahService_RegistrasiSekolah_Handler,
		},
		{
			MethodName: "GetSekolahTenant",
			Handler:    _SekolahService_GetSekolahTenant_Handler,
		},
		{
			MethodName: "CreateSekolah",
			Handler:    _SekolahService_CreateSekolah_Handler,
		},
		{
			MethodName: "GetSekolah",
			Handler:    _SekolahService_GetSekolah_Handler,
		},
		{
			MethodName: "UpdateSekolah",
			Handler:    _SekolahService_UpdateSekolah_Handler,
		},
		{
			MethodName: "CreateKategoriSekolah",
			Handler:    _SekolahService_CreateKategoriSekolah_Handler,
		},
		{
			MethodName: "UpdateKategoriSekolah",
			Handler:    _SekolahService_UpdateKategoriSekolah_Handler,
		},
		{
			MethodName: "GetKategoriSekolah",
			Handler:    _SekolahService_GetKategoriSekolah_Handler,
		},
		{
			MethodName: "DeleteKategoriSekolah",
			Handler:    _SekolahService_DeleteKategoriSekolah_Handler,
		},
		{
			MethodName: "ProsesKategoriSekolahDanKelas",
			Handler:    _SekolahService_ProsesKategoriSekolahDanKelas_Handler,
		},
		{
			MethodName: "CreateKategoriMapel",
			Handler:    _SekolahService_CreateKategoriMapel_Handler,
		},
		{
			MethodName: "UpdateKategoriMapel",
			Handler:    _SekolahService_UpdateKategoriMapel_Handler,
		},
		{
			MethodName: "GetKategoriMapel",
			Handler:    _SekolahService_GetKategoriMapel_Handler,
		},
		{
			MethodName: "DeleteKategoriMapel",
			Handler:    _SekolahService_DeleteKategoriMapel_Handler,
		},
		{
			MethodName: "BatchDeleteKategoriMapel",
			Handler:    _SekolahService_BatchDeleteKategoriMapel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	SiswaService_CreateSiswa_FullMethodName       = "/sekolah.SiswaService/CreateSiswa"
	SiswaService_CreateBanyakSiswa_FullMethodName = "/sekolah.SiswaService/CreateBanyakSiswa"
	SiswaService_GetSiswa_FullMethodName          = "/sekolah.SiswaService/GetSiswa"
	SiswaService_UpdateSiswa_FullMethodName       = "/sekolah.SiswaService/UpdateSiswa"
	SiswaService_DeleteSiswa_FullMethodName       = "/sekolah.SiswaService/DeleteSiswa"
	SiswaService_SearchSiswa_FullMethodName       = "/sekolah.SiswaService/SearchSiswa"
)

// SiswaServiceClient is the client API for SiswaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =======================================
// SISWA SERVICE
type SiswaServiceClient interface {
	// CRUD for Siswa
	CreateSiswa(ctx context.Context, in *CreateSiswaRequest, opts ...grpc.CallOption) (*CreateSiswaResponse, error)
	CreateBanyakSiswa(ctx context.Context, in *CreateBanyakSiswaRequest, opts ...grpc.CallOption) (*CreateBanyakSiswaResponse, error)
	GetSiswa(ctx context.Context, in *GetSiswaRequest, opts ...grpc.CallOption) (*GetSiswaResponse, error)
	UpdateSiswa(ctx context.Context, in *UpdateSiswaRequest, opts ...grpc.CallOption) (*UpdateSiswaResponse, error)
	DeleteSiswa(ctx context.Context, in *DeleteSiswaRequest, opts ...grpc.CallOption) (*DeleteSiswaResponse, error)
	SearchSiswa(ctx context.Context, in *SearchSiswaRequest, opts ...grpc.CallOption) (*SearchSiswaResponse, error)
}

type siswaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSiswaServiceClient(cc grpc.ClientConnInterface) SiswaServiceClient {
	return &siswaServiceClient{cc}
}

func (c *siswaServiceClient) CreateSiswa(ctx context.Context, in *CreateSiswaRequest, opts ...grpc.CallOption) (*CreateSiswaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSiswaResponse)
	err := c.cc.Invoke(ctx, SiswaService_CreateSiswa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siswaServiceClient) CreateBanyakSiswa(ctx context.Context, in *CreateBanyakSiswaRequest, opts ...grpc.CallOption) (*CreateBanyakSiswaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBanyakSiswaResponse)
	err := c.cc.Invoke(ctx, SiswaService_CreateBanyakSiswa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siswaServiceClient) GetSiswa(ctx context.Context, in *GetSiswaRequest, opts ...grpc.CallOption) (*GetSiswaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSiswaResponse)
	err := c.cc.Invoke(ctx, SiswaService_GetSiswa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siswaServiceClient) UpdateSiswa(ctx context.Context, in *UpdateSiswaRequest, opts ...grpc.CallOption) (*UpdateSiswaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSiswaResponse)
	err := c.cc.Invoke(ctx, SiswaService_UpdateSiswa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siswaServiceClient) DeleteSiswa(ctx context.Context, in *DeleteSiswaRequest, opts ...grpc.CallOption) (*DeleteSiswaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSiswaResponse)
	err := c.cc.Invoke(ctx, SiswaService_DeleteSiswa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siswaServiceClient) SearchSiswa(ctx context.Context, in *SearchSiswaRequest, opts ...grpc.CallOption) (*SearchSiswaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchSiswaResponse)
	err := c.cc.Invoke(ctx, SiswaService_SearchSiswa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SiswaServiceServer is the server API for SiswaService service.
// All implementations must embed UnimplementedSiswaServiceServer
// for forward compatibility.
//
// =======================================
// SISWA SERVICE
type SiswaServiceServer interface {
	// CRUD for Siswa
	CreateSiswa(context.Context, *CreateSiswaRequest) (*CreateSiswaResponse, error)
	CreateBanyakSiswa(context.Context, *CreateBanyakSiswaRequest) (*CreateBanyakSiswaResponse, error)
	GetSiswa(context.Context, *GetSiswaRequest) (*GetSiswaResponse, error)
	UpdateSiswa(context.Context, *UpdateSiswaRequest) (*UpdateSiswaResponse, error)
	DeleteSiswa(context.Context, *DeleteSiswaRequest) (*DeleteSiswaResponse, error)
	SearchSiswa(context.Context, *SearchSiswaRequest) (*SearchSiswaResponse, error)
	mustEmbedUnimplementedSiswaServiceServer()
}

// UnimplementedSiswaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSiswaServiceServer struct{}

func (UnimplementedSiswaServiceServer) CreateSiswa(context.Context, *CreateSiswaRequest) (*CreateSiswaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSiswa not implemented")
}
func (UnimplementedSiswaServiceServer) CreateBanyakSiswa(context.Context, *CreateBanyakSiswaRequest) (*CreateBanyakSiswaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanyakSiswa not implemented")
}
func (UnimplementedSiswaServiceServer) GetSiswa(context.Context, *GetSiswaRequest) (*GetSiswaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSiswa not implemented")
}
func (UnimplementedSiswaServiceServer) UpdateSiswa(context.Context, *UpdateSiswaRequest) (*UpdateSiswaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSiswa not implemented")
}
func (UnimplementedSiswaServiceServer) DeleteSiswa(context.Context, *DeleteSiswaRequest) (*DeleteSiswaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSiswa not implemented")
}
func (UnimplementedSiswaServiceServer) SearchSiswa(context.Context, *SearchSiswaRequest) (*SearchSiswaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSiswa not implemented")
}
func (UnimplementedSiswaServiceServer) mustEmbedUnimplementedSiswaServiceServer() {}
func (UnimplementedSiswaServiceServer) testEmbeddedByValue()                      {}

// UnsafeSiswaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SiswaServiceServer will
// result in compilation errors.
type UnsafeSiswaServiceServer interface {
	mustEmbedUnimplementedSiswaServiceServer()
}

func RegisterSiswaServiceServer(s grpc.ServiceRegistrar, srv SiswaServiceServer) {
	// If the following call pancis, it indicates UnimplementedSiswaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SiswaService_ServiceDesc, srv)
}

func _SiswaService_CreateSiswa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSiswaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiswaServiceServer).CreateSiswa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiswaService_CreateSiswa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiswaServiceServer).CreateSiswa(ctx, req.(*CreateSiswaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiswaService_CreateBanyakSiswa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBanyakSiswaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiswaServiceServer).CreateBanyakSiswa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiswaService_CreateBanyakSiswa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiswaServiceServer).CreateBanyakSiswa(ctx, req.(*CreateBanyakSiswaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiswaService_GetSiswa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSiswaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiswaServiceServer).GetSiswa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiswaService_GetSiswa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiswaServiceServer).GetSiswa(ctx, req.(*GetSiswaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiswaService_UpdateSiswa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSiswaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiswaServiceServer).UpdateSiswa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiswaService_UpdateSiswa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiswaServiceServer).UpdateSiswa(ctx, req.(*UpdateSiswaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiswaService_DeleteSiswa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSiswaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiswaServiceServer).DeleteSiswa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiswaService_DeleteSiswa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiswaServiceServer).DeleteSiswa(ctx, req.(*DeleteSiswaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiswaService_SearchSiswa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSiswaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiswaServiceServer).SearchSiswa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiswaService_SearchSiswa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiswaServiceServer).SearchSiswa(ctx, req.(*SearchSiswaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SiswaService_ServiceDesc is the grpc.ServiceDesc for SiswaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SiswaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.SiswaService",
	HandlerType: (*SiswaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSiswa",
			Handler:    _SiswaService_CreateSiswa_Handler,
		},
		{
			MethodName: "CreateBanyakSiswa",
			Handler:    _SiswaService_CreateBanyakSiswa_Handler,
		},
		{
			MethodName: "GetSiswa",
			Handler:    _SiswaService_GetSiswa_Handler,
		},
		{
			MethodName: "UpdateSiswa",
			Handler:    _SiswaService_UpdateSiswa_Handler,
		},
		{
			MethodName: "DeleteSiswa",
			Handler:    _SiswaService_DeleteSiswa_Handler,
		},
		{
			MethodName: "SearchSiswa",
			Handler:    _SiswaService_SearchSiswa_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	UploadDataSekolahService_UploadDataSekolah_FullMethodName   = "/sekolah.UploadDataSekolahService/UploadDataSekolah"
	UploadDataSekolahService_DownloadDataSekolah_FullMethodName = "/sekolah.UploadDataSekolahService/DownloadDataSekolah"
)

// UploadDataSekolahServiceClient is the client API for UploadDataSekolahService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =======================================
// UPLOAD SERVICE
type UploadDataSekolahServiceClient interface {
	UploadDataSekolah(ctx context.Context, in *UploadDataSekolahRequest, opts ...grpc.CallOption) (*UploadDataSekolahResponse, error)
	DownloadDataSekolah(ctx context.Context, in *DownloadDataSekolahRequest, opts ...grpc.CallOption) (*DownloadDataSekolahResponse, error)
}

type uploadDataSekolahServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadDataSekolahServiceClient(cc grpc.ClientConnInterface) UploadDataSekolahServiceClient {
	return &uploadDataSekolahServiceClient{cc}
}

func (c *uploadDataSekolahServiceClient) UploadDataSekolah(ctx context.Context, in *UploadDataSekolahRequest, opts ...grpc.CallOption) (*UploadDataSekolahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadDataSekolahResponse)
	err := c.cc.Invoke(ctx, UploadDataSekolahService_UploadDataSekolah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadDataSekolahServiceClient) DownloadDataSekolah(ctx context.Context, in *DownloadDataSekolahRequest, opts ...grpc.CallOption) (*DownloadDataSekolahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadDataSekolahResponse)
	err := c.cc.Invoke(ctx, UploadDataSekolahService_DownloadDataSekolah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadDataSekolahServiceServer is the server API for UploadDataSekolahService service.
// All implementations must embed UnimplementedUploadDataSekolahServiceServer
// for forward compatibility.
//
// =======================================
// UPLOAD SERVICE
type UploadDataSekolahServiceServer interface {
	UploadDataSekolah(context.Context, *UploadDataSekolahRequest) (*UploadDataSekolahResponse, error)
	DownloadDataSekolah(context.Context, *DownloadDataSekolahRequest) (*DownloadDataSekolahResponse, error)
	mustEmbedUnimplementedUploadDataSekolahServiceServer()
}

// UnimplementedUploadDataSekolahServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUploadDataSekolahServiceServer struct{}

func (UnimplementedUploadDataSekolahServiceServer) UploadDataSekolah(context.Context, *UploadDataSekolahRequest) (*UploadDataSekolahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDataSekolah not implemented")
}
func (UnimplementedUploadDataSekolahServiceServer) DownloadDataSekolah(context.Context, *DownloadDataSekolahRequest) (*DownloadDataSekolahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadDataSekolah not implemented")
}
func (UnimplementedUploadDataSekolahServiceServer) mustEmbedUnimplementedUploadDataSekolahServiceServer() {
}
func (UnimplementedUploadDataSekolahServiceServer) testEmbeddedByValue() {}

// UnsafeUploadDataSekolahServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadDataSekolahServiceServer will
// result in compilation errors.
type UnsafeUploadDataSekolahServiceServer interface {
	mustEmbedUnimplementedUploadDataSekolahServiceServer()
}

func RegisterUploadDataSekolahServiceServer(s grpc.ServiceRegistrar, srv UploadDataSekolahServiceServer) {
	// If the following call pancis, it indicates UnimplementedUploadDataSekolahServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UploadDataSekolahService_ServiceDesc, srv)
}

func _UploadDataSekolahService_UploadDataSekolah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDataSekolahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadDataSekolahServiceServer).UploadDataSekolah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadDataSekolahService_UploadDataSekolah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadDataSekolahServiceServer).UploadDataSekolah(ctx, req.(*UploadDataSekolahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadDataSekolahService_DownloadDataSekolah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadDataSekolahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadDataSekolahServiceServer).DownloadDataSekolah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadDataSekolahService_DownloadDataSekolah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadDataSekolahServiceServer).DownloadDataSekolah(ctx, req.(*DownloadDataSekolahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UploadDataSekolahService_ServiceDesc is the grpc.ServiceDesc for UploadDataSekolahService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadDataSekolahService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.UploadDataSekolahService",
	HandlerType: (*UploadDataSekolahServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadDataSekolah",
			Handler:    _UploadDataSekolahService_UploadDataSekolah_Handler,
		},
		{
			MethodName: "DownloadDataSekolah",
			Handler:    _UploadDataSekolahService_DownloadDataSekolah_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	NilaiAkhirService_CreateNilaiAkhir_FullMethodName = "/sekolah.NilaiAkhirService/CreateNilaiAkhir"
	NilaiAkhirService_GetNilaiAkhir_FullMethodName    = "/sekolah.NilaiAkhirService/GetNilaiAkhir"
	NilaiAkhirService_UpdateNilaiAkhir_FullMethodName = "/sekolah.NilaiAkhirService/UpdateNilaiAkhir"
	NilaiAkhirService_DeleteNilaiAkhir_FullMethodName = "/sekolah.NilaiAkhirService/DeleteNilaiAkhir"
	NilaiAkhirService_SearchNilaiAkhir_FullMethodName = "/sekolah.NilaiAkhirService/SearchNilaiAkhir"
)

// NilaiAkhirServiceClient is the client API for NilaiAkhirService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SERVICE NILAI AKHIR
type NilaiAkhirServiceClient interface {
	// Nilai Akhir
	CreateNilaiAkhir(ctx context.Context, in *CreateNilaiAkhirRequest, opts ...grpc.CallOption) (*CreateNilaiAkhirResponse, error)
	GetNilaiAkhir(ctx context.Context, in *GetNilaiAkhirRequest, opts ...grpc.CallOption) (*GetNilaiAkhirResponse, error)
	UpdateNilaiAkhir(ctx context.Context, in *UpdateNilaiAkhirRequest, opts ...grpc.CallOption) (*UpdateNilaiAkhirResponse, error)
	DeleteNilaiAkhir(ctx context.Context, in *DeleteNilaiAkhirRequest, opts ...grpc.CallOption) (*DeleteNilaiAkhirResponse, error)
	SearchNilaiAkhir(ctx context.Context, in *SearchNilaiAkhirRequest, opts ...grpc.CallOption) (*SearchNilaiAkhirResponse, error)
}

type nilaiAkhirServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNilaiAkhirServiceClient(cc grpc.ClientConnInterface) NilaiAkhirServiceClient {
	return &nilaiAkhirServiceClient{cc}
}

func (c *nilaiAkhirServiceClient) CreateNilaiAkhir(ctx context.Context, in *CreateNilaiAkhirRequest, opts ...grpc.CallOption) (*CreateNilaiAkhirResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNilaiAkhirResponse)
	err := c.cc.Invoke(ctx, NilaiAkhirService_CreateNilaiAkhir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nilaiAkhirServiceClient) GetNilaiAkhir(ctx context.Context, in *GetNilaiAkhirRequest, opts ...grpc.CallOption) (*GetNilaiAkhirResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNilaiAkhirResponse)
	err := c.cc.Invoke(ctx, NilaiAkhirService_GetNilaiAkhir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nilaiAkhirServiceClient) UpdateNilaiAkhir(ctx context.Context, in *UpdateNilaiAkhirRequest, opts ...grpc.CallOption) (*UpdateNilaiAkhirResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNilaiAkhirResponse)
	err := c.cc.Invoke(ctx, NilaiAkhirService_UpdateNilaiAkhir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nilaiAkhirServiceClient) DeleteNilaiAkhir(ctx context.Context, in *DeleteNilaiAkhirRequest, opts ...grpc.CallOption) (*DeleteNilaiAkhirResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNilaiAkhirResponse)
	err := c.cc.Invoke(ctx, NilaiAkhirService_DeleteNilaiAkhir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nilaiAkhirServiceClient) SearchNilaiAkhir(ctx context.Context, in *SearchNilaiAkhirRequest, opts ...grpc.CallOption) (*SearchNilaiAkhirResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchNilaiAkhirResponse)
	err := c.cc.Invoke(ctx, NilaiAkhirService_SearchNilaiAkhir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NilaiAkhirServiceServer is the server API for NilaiAkhirService service.
// All implementations must embed UnimplementedNilaiAkhirServiceServer
// for forward compatibility.
//
// SERVICE NILAI AKHIR
type NilaiAkhirServiceServer interface {
	// Nilai Akhir
	CreateNilaiAkhir(context.Context, *CreateNilaiAkhirRequest) (*CreateNilaiAkhirResponse, error)
	GetNilaiAkhir(context.Context, *GetNilaiAkhirRequest) (*GetNilaiAkhirResponse, error)
	UpdateNilaiAkhir(context.Context, *UpdateNilaiAkhirRequest) (*UpdateNilaiAkhirResponse, error)
	DeleteNilaiAkhir(context.Context, *DeleteNilaiAkhirRequest) (*DeleteNilaiAkhirResponse, error)
	SearchNilaiAkhir(context.Context, *SearchNilaiAkhirRequest) (*SearchNilaiAkhirResponse, error)
	mustEmbedUnimplementedNilaiAkhirServiceServer()
}

// UnimplementedNilaiAkhirServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNilaiAkhirServiceServer struct{}

func (UnimplementedNilaiAkhirServiceServer) CreateNilaiAkhir(context.Context, *CreateNilaiAkhirRequest) (*CreateNilaiAkhirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNilaiAkhir not implemented")
}
func (UnimplementedNilaiAkhirServiceServer) GetNilaiAkhir(context.Context, *GetNilaiAkhirRequest) (*GetNilaiAkhirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNilaiAkhir not implemented")
}
func (UnimplementedNilaiAkhirServiceServer) UpdateNilaiAkhir(context.Context, *UpdateNilaiAkhirRequest) (*UpdateNilaiAkhirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNilaiAkhir not implemented")
}
func (UnimplementedNilaiAkhirServiceServer) DeleteNilaiAkhir(context.Context, *DeleteNilaiAkhirRequest) (*DeleteNilaiAkhirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNilaiAkhir not implemented")
}
func (UnimplementedNilaiAkhirServiceServer) SearchNilaiAkhir(context.Context, *SearchNilaiAkhirRequest) (*SearchNilaiAkhirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNilaiAkhir not implemented")
}
func (UnimplementedNilaiAkhirServiceServer) mustEmbedUnimplementedNilaiAkhirServiceServer() {}
func (UnimplementedNilaiAkhirServiceServer) testEmbeddedByValue()                           {}

// UnsafeNilaiAkhirServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NilaiAkhirServiceServer will
// result in compilation errors.
type UnsafeNilaiAkhirServiceServer interface {
	mustEmbedUnimplementedNilaiAkhirServiceServer()
}

func RegisterNilaiAkhirServiceServer(s grpc.ServiceRegistrar, srv NilaiAkhirServiceServer) {
	// If the following call pancis, it indicates UnimplementedNilaiAkhirServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NilaiAkhirService_ServiceDesc, srv)
}

func _NilaiAkhirService_CreateNilaiAkhir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNilaiAkhirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NilaiAkhirServiceServer).CreateNilaiAkhir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NilaiAkhirService_CreateNilaiAkhir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NilaiAkhirServiceServer).CreateNilaiAkhir(ctx, req.(*CreateNilaiAkhirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NilaiAkhirService_GetNilaiAkhir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNilaiAkhirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NilaiAkhirServiceServer).GetNilaiAkhir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NilaiAkhirService_GetNilaiAkhir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NilaiAkhirServiceServer).GetNilaiAkhir(ctx, req.(*GetNilaiAkhirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NilaiAkhirService_UpdateNilaiAkhir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNilaiAkhirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NilaiAkhirServiceServer).UpdateNilaiAkhir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NilaiAkhirService_UpdateNilaiAkhir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NilaiAkhirServiceServer).UpdateNilaiAkhir(ctx, req.(*UpdateNilaiAkhirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NilaiAkhirService_DeleteNilaiAkhir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNilaiAkhirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NilaiAkhirServiceServer).DeleteNilaiAkhir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NilaiAkhirService_DeleteNilaiAkhir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NilaiAkhirServiceServer).DeleteNilaiAkhir(ctx, req.(*DeleteNilaiAkhirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NilaiAkhirService_SearchNilaiAkhir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchNilaiAkhirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NilaiAkhirServiceServer).SearchNilaiAkhir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NilaiAkhirService_SearchNilaiAkhir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NilaiAkhirServiceServer).SearchNilaiAkhir(ctx, req.(*SearchNilaiAkhirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NilaiAkhirService_ServiceDesc is the grpc.ServiceDesc for NilaiAkhirService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NilaiAkhirService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.NilaiAkhirService",
	HandlerType: (*NilaiAkhirServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNilaiAkhir",
			Handler:    _NilaiAkhirService_CreateNilaiAkhir_Handler,
		},
		{
			MethodName: "GetNilaiAkhir",
			Handler:    _NilaiAkhirService_GetNilaiAkhir_Handler,
		},
		{
			MethodName: "UpdateNilaiAkhir",
			Handler:    _NilaiAkhirService_UpdateNilaiAkhir_Handler,
		},
		{
			MethodName: "DeleteNilaiAkhir",
			Handler:    _NilaiAkhirService_DeleteNilaiAkhir_Handler,
		},
		{
			MethodName: "SearchNilaiAkhir",
			Handler:    _NilaiAkhirService_SearchNilaiAkhir_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	KelasService_CreateKelas_FullMethodName         = "/sekolah.KelasService/CreateKelas"
	KelasService_CreateBanyakKelas_FullMethodName   = "/sekolah.KelasService/CreateBanyakKelas"
	KelasService_GetKelas_FullMethodName            = "/sekolah.KelasService/GetKelas"
	KelasService_UpdateKelas_FullMethodName         = "/sekolah.KelasService/UpdateKelas"
	KelasService_DeleteKelas_FullMethodName         = "/sekolah.KelasService/DeleteKelas"
	KelasService_GetKelasByName_FullMethodName      = "/sekolah.KelasService/GetKelasByName"
	KelasService_ImportDapodikRombel_FullMethodName = "/sekolah.KelasService/ImportDapodikRombel"
)

// KelasServiceClient is the client API for KelasService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =======================================
// KELAS SERVICE
type KelasServiceClient interface {
	// Kelas
	CreateKelas(ctx context.Context, in *CreateKelasRequest, opts ...grpc.CallOption) (*CreateKelasResponse, error)
	CreateBanyakKelas(ctx context.Context, in *CreateBanyakKelasRequest, opts ...grpc.CallOption) (*CreateBanyakKelasResponse, error)
	GetKelas(ctx context.Context, in *GetKelasRequest, opts ...grpc.CallOption) (*GetKelasResponse, error)
	UpdateKelas(ctx context.Context, in *UpdateKelasRequest, opts ...grpc.CallOption) (*UpdateKelasResponse, error)
	DeleteKelas(ctx context.Context, in *DeleteKelasRequest, opts ...grpc.CallOption) (*DeleteKelasResponse, error)
	GetKelasByName(ctx context.Context, in *GetKelasByNameRequest, opts ...grpc.CallOption) (*GetKelasByNameResponse, error)
	ImportDapodikRombel(ctx context.Context, in *ImportDapodikRombelRequest, opts ...grpc.CallOption) (*ImportDapodikRombelResponse, error)
}

type kelasServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKelasServiceClient(cc grpc.ClientConnInterface) KelasServiceClient {
	return &kelasServiceClient{cc}
}

func (c *kelasServiceClient) CreateKelas(ctx context.Context, in *CreateKelasRequest, opts ...grpc.CallOption) (*CreateKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKelasResponse)
	err := c.cc.Invoke(ctx, KelasService_CreateKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kelasServiceClient) CreateBanyakKelas(ctx context.Context, in *CreateBanyakKelasRequest, opts ...grpc.CallOption) (*CreateBanyakKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBanyakKelasResponse)
	err := c.cc.Invoke(ctx, KelasService_CreateBanyakKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kelasServiceClient) GetKelas(ctx context.Context, in *GetKelasRequest, opts ...grpc.CallOption) (*GetKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKelasResponse)
	err := c.cc.Invoke(ctx, KelasService_GetKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kelasServiceClient) UpdateKelas(ctx context.Context, in *UpdateKelasRequest, opts ...grpc.CallOption) (*UpdateKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateKelasResponse)
	err := c.cc.Invoke(ctx, KelasService_UpdateKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kelasServiceClient) DeleteKelas(ctx context.Context, in *DeleteKelasRequest, opts ...grpc.CallOption) (*DeleteKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteKelasResponse)
	err := c.cc.Invoke(ctx, KelasService_DeleteKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kelasServiceClient) GetKelasByName(ctx context.Context, in *GetKelasByNameRequest, opts ...grpc.CallOption) (*GetKelasByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKelasByNameResponse)
	err := c.cc.Invoke(ctx, KelasService_GetKelasByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kelasServiceClient) ImportDapodikRombel(ctx context.Context, in *ImportDapodikRombelRequest, opts ...grpc.CallOption) (*ImportDapodikRombelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportDapodikRombelResponse)
	err := c.cc.Invoke(ctx, KelasService_ImportDapodikRombel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KelasServiceServer is the server API for KelasService service.
// All implementations must embed UnimplementedKelasServiceServer
// for forward compatibility.
//
// =======================================
// KELAS SERVICE
type KelasServiceServer interface {
	// Kelas
	CreateKelas(context.Context, *CreateKelasRequest) (*CreateKelasResponse, error)
	CreateBanyakKelas(context.Context, *CreateBanyakKelasRequest) (*CreateBanyakKelasResponse, error)
	GetKelas(context.Context, *GetKelasRequest) (*GetKelasResponse, error)
	UpdateKelas(context.Context, *UpdateKelasRequest) (*UpdateKelasResponse, error)
	DeleteKelas(context.Context, *DeleteKelasRequest) (*DeleteKelasResponse, error)
	GetKelasByName(context.Context, *GetKelasByNameRequest) (*GetKelasByNameResponse, error)
	ImportDapodikRombel(context.Context, *ImportDapodikRombelRequest) (*ImportDapodikRombelResponse, error)
	mustEmbedUnimplementedKelasServiceServer()
}

// UnimplementedKelasServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKelasServiceServer struct{}

func (UnimplementedKelasServiceServer) CreateKelas(context.Context, *CreateKelasRequest) (*CreateKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKelas not implemented")
}
func (UnimplementedKelasServiceServer) CreateBanyakKelas(context.Context, *CreateBanyakKelasRequest) (*CreateBanyakKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanyakKelas not implemented")
}
func (UnimplementedKelasServiceServer) GetKelas(context.Context, *GetKelasRequest) (*GetKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKelas not implemented")
}
func (UnimplementedKelasServiceServer) UpdateKelas(context.Context, *UpdateKelasRequest) (*UpdateKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKelas not implemented")
}
func (UnimplementedKelasServiceServer) DeleteKelas(context.Context, *DeleteKelasRequest) (*DeleteKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKelas not implemented")
}
func (UnimplementedKelasServiceServer) GetKelasByName(context.Context, *GetKelasByNameRequest) (*GetKelasByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKelasByName not implemented")
}
func (UnimplementedKelasServiceServer) ImportDapodikRombel(context.Context, *ImportDapodikRombelRequest) (*ImportDapodikRombelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportDapodikRombel not implemented")
}
func (UnimplementedKelasServiceServer) mustEmbedUnimplementedKelasServiceServer() {}
func (UnimplementedKelasServiceServer) testEmbeddedByValue()                      {}

// UnsafeKelasServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KelasServiceServer will
// result in compilation errors.
type UnsafeKelasServiceServer interface {
	mustEmbedUnimplementedKelasServiceServer()
}

func RegisterKelasServiceServer(s grpc.ServiceRegistrar, srv KelasServiceServer) {
	// If the following call pancis, it indicates UnimplementedKelasServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KelasService_ServiceDesc, srv)
}

func _KelasService_CreateKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KelasServiceServer).CreateKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KelasService_CreateKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KelasServiceServer).CreateKelas(ctx, req.(*CreateKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KelasService_CreateBanyakKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBanyakKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KelasServiceServer).CreateBanyakKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KelasService_CreateBanyakKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KelasServiceServer).CreateBanyakKelas(ctx, req.(*CreateBanyakKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KelasService_GetKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KelasServiceServer).GetKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KelasService_GetKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KelasServiceServer).GetKelas(ctx, req.(*GetKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KelasService_UpdateKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KelasServiceServer).UpdateKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KelasService_UpdateKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KelasServiceServer).UpdateKelas(ctx, req.(*UpdateKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KelasService_DeleteKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KelasServiceServer).DeleteKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KelasService_DeleteKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KelasServiceServer).DeleteKelas(ctx, req.(*DeleteKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KelasService_GetKelasByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKelasByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KelasServiceServer).GetKelasByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KelasService_GetKelasByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KelasServiceServer).GetKelasByName(ctx, req.(*GetKelasByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KelasService_ImportDapodikRombel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportDapodikRombelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KelasServiceServer).ImportDapodikRombel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KelasService_ImportDapodikRombel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KelasServiceServer).ImportDapodikRombel(ctx, req.(*ImportDapodikRombelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KelasService_ServiceDesc is the grpc.ServiceDesc for KelasService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KelasService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.KelasService",
	HandlerType: (*KelasServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKelas",
			Handler:    _KelasService_CreateKelas_Handler,
		},
		{
			MethodName: "CreateBanyakKelas",
			Handler:    _KelasService_CreateBanyakKelas_Handler,
		},
		{
			MethodName: "GetKelas",
			Handler:    _KelasService_GetKelas_Handler,
		},
		{
			MethodName: "UpdateKelas",
			Handler:    _KelasService_UpdateKelas_Handler,
		},
		{
			MethodName: "DeleteKelas",
			Handler:    _KelasService_DeleteKelas_Handler,
		},
		{
			MethodName: "GetKelasByName",
			Handler:    _KelasService_GetKelasByName_Handler,
		},
		{
			MethodName: "ImportDapodikRombel",
			Handler:    _KelasService_ImportDapodikRombel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	AnggotaKelasService_CreateAnggotaKelas_FullMethodName       = "/sekolah.AnggotaKelasService/CreateAnggotaKelas"
	AnggotaKelasService_CreateBanyakAnggotaKelas_FullMethodName = "/sekolah.AnggotaKelasService/CreateBanyakAnggotaKelas"
	AnggotaKelasService_GetAnggotaKelas_FullMethodName          = "/sekolah.AnggotaKelasService/GetAnggotaKelas"
	AnggotaKelasService_UpdateAnggotaKelas_FullMethodName       = "/sekolah.AnggotaKelasService/UpdateAnggotaKelas"
	AnggotaKelasService_DeleteAnggotaKelas_FullMethodName       = "/sekolah.AnggotaKelasService/DeleteAnggotaKelas"
	AnggotaKelasService_DeleteBatchAnggotaKelas_FullMethodName  = "/sekolah.AnggotaKelasService/DeleteBatchAnggotaKelas"
	AnggotaKelasService_SearchAnggotaKelas_FullMethodName       = "/sekolah.AnggotaKelasService/SearchAnggotaKelas"
	AnggotaKelasService_FilterAnggotaKelas_FullMethodName       = "/sekolah.AnggotaKelasService/FilterAnggotaKelas"
)

// AnggotaKelasServiceClient is the client API for AnggotaKelasService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =======================================
// ANGGOTA KELAS SERVICE
type AnggotaKelasServiceClient interface {
	// AnggotaKelas
	CreateAnggotaKelas(ctx context.Context, in *CreateAnggotaKelasRequest, opts ...grpc.CallOption) (*CreateAnggotaKelasResponse, error)
	CreateBanyakAnggotaKelas(ctx context.Context, in *CreateBanyakAnggotaKelasRequest, opts ...grpc.CallOption) (*CreateBanyakAnggotaKelasResponse, error)
	GetAnggotaKelas(ctx context.Context, in *GetAnggotaKelasRequest, opts ...grpc.CallOption) (*GetAnggotaKelasResponse, error)
	UpdateAnggotaKelas(ctx context.Context, in *UpdateAnggotaKelasRequest, opts ...grpc.CallOption) (*UpdateAnggotaKelasResponse, error)
	DeleteAnggotaKelas(ctx context.Context, in *DeleteAnggotaKelasRequest, opts ...grpc.CallOption) (*DeleteAnggotaKelasResponse, error)
	DeleteBatchAnggotaKelas(ctx context.Context, in *DeleteBatchAnggotaKelasRequest, opts ...grpc.CallOption) (*DeleteBatchAnggotaKelasResponse, error)
	SearchAnggotaKelas(ctx context.Context, in *SearchAnggotaKelasRequest, opts ...grpc.CallOption) (*SearchAnggotaKelasResponse, error)
	FilterAnggotaKelas(ctx context.Context, in *FilterAnggotaKelasRequest, opts ...grpc.CallOption) (*FilterAnggotaKelasResponse, error)
}

type anggotaKelasServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnggotaKelasServiceClient(cc grpc.ClientConnInterface) AnggotaKelasServiceClient {
	return &anggotaKelasServiceClient{cc}
}

func (c *anggotaKelasServiceClient) CreateAnggotaKelas(ctx context.Context, in *CreateAnggotaKelasRequest, opts ...grpc.CallOption) (*CreateAnggotaKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAnggotaKelasResponse)
	err := c.cc.Invoke(ctx, AnggotaKelasService_CreateAnggotaKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anggotaKelasServiceClient) CreateBanyakAnggotaKelas(ctx context.Context, in *CreateBanyakAnggotaKelasRequest, opts ...grpc.CallOption) (*CreateBanyakAnggotaKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBanyakAnggotaKelasResponse)
	err := c.cc.Invoke(ctx, AnggotaKelasService_CreateBanyakAnggotaKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anggotaKelasServiceClient) GetAnggotaKelas(ctx context.Context, in *GetAnggotaKelasRequest, opts ...grpc.CallOption) (*GetAnggotaKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAnggotaKelasResponse)
	err := c.cc.Invoke(ctx, AnggotaKelasService_GetAnggotaKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anggotaKelasServiceClient) UpdateAnggotaKelas(ctx context.Context, in *UpdateAnggotaKelasRequest, opts ...grpc.CallOption) (*UpdateAnggotaKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAnggotaKelasResponse)
	err := c.cc.Invoke(ctx, AnggotaKelasService_UpdateAnggotaKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anggotaKelasServiceClient) DeleteAnggotaKelas(ctx context.Context, in *DeleteAnggotaKelasRequest, opts ...grpc.CallOption) (*DeleteAnggotaKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAnggotaKelasResponse)
	err := c.cc.Invoke(ctx, AnggotaKelasService_DeleteAnggotaKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anggotaKelasServiceClient) DeleteBatchAnggotaKelas(ctx context.Context, in *DeleteBatchAnggotaKelasRequest, opts ...grpc.CallOption) (*DeleteBatchAnggotaKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBatchAnggotaKelasResponse)
	err := c.cc.Invoke(ctx, AnggotaKelasService_DeleteBatchAnggotaKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anggotaKelasServiceClient) SearchAnggotaKelas(ctx context.Context, in *SearchAnggotaKelasRequest, opts ...grpc.CallOption) (*SearchAnggotaKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchAnggotaKelasResponse)
	err := c.cc.Invoke(ctx, AnggotaKelasService_SearchAnggotaKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anggotaKelasServiceClient) FilterAnggotaKelas(ctx context.Context, in *FilterAnggotaKelasRequest, opts ...grpc.CallOption) (*FilterAnggotaKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FilterAnggotaKelasResponse)
	err := c.cc.Invoke(ctx, AnggotaKelasService_FilterAnggotaKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnggotaKelasServiceServer is the server API for AnggotaKelasService service.
// All implementations must embed UnimplementedAnggotaKelasServiceServer
// for forward compatibility.
//
// =======================================
// ANGGOTA KELAS SERVICE
type AnggotaKelasServiceServer interface {
	// AnggotaKelas
	CreateAnggotaKelas(context.Context, *CreateAnggotaKelasRequest) (*CreateAnggotaKelasResponse, error)
	CreateBanyakAnggotaKelas(context.Context, *CreateBanyakAnggotaKelasRequest) (*CreateBanyakAnggotaKelasResponse, error)
	GetAnggotaKelas(context.Context, *GetAnggotaKelasRequest) (*GetAnggotaKelasResponse, error)
	UpdateAnggotaKelas(context.Context, *UpdateAnggotaKelasRequest) (*UpdateAnggotaKelasResponse, error)
	DeleteAnggotaKelas(context.Context, *DeleteAnggotaKelasRequest) (*DeleteAnggotaKelasResponse, error)
	DeleteBatchAnggotaKelas(context.Context, *DeleteBatchAnggotaKelasRequest) (*DeleteBatchAnggotaKelasResponse, error)
	SearchAnggotaKelas(context.Context, *SearchAnggotaKelasRequest) (*SearchAnggotaKelasResponse, error)
	FilterAnggotaKelas(context.Context, *FilterAnggotaKelasRequest) (*FilterAnggotaKelasResponse, error)
	mustEmbedUnimplementedAnggotaKelasServiceServer()
}

// UnimplementedAnggotaKelasServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnggotaKelasServiceServer struct{}

func (UnimplementedAnggotaKelasServiceServer) CreateAnggotaKelas(context.Context, *CreateAnggotaKelasRequest) (*CreateAnggotaKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnggotaKelas not implemented")
}
func (UnimplementedAnggotaKelasServiceServer) CreateBanyakAnggotaKelas(context.Context, *CreateBanyakAnggotaKelasRequest) (*CreateBanyakAnggotaKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanyakAnggotaKelas not implemented")
}
func (UnimplementedAnggotaKelasServiceServer) GetAnggotaKelas(context.Context, *GetAnggotaKelasRequest) (*GetAnggotaKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnggotaKelas not implemented")
}
func (UnimplementedAnggotaKelasServiceServer) UpdateAnggotaKelas(context.Context, *UpdateAnggotaKelasRequest) (*UpdateAnggotaKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnggotaKelas not implemented")
}
func (UnimplementedAnggotaKelasServiceServer) DeleteAnggotaKelas(context.Context, *DeleteAnggotaKelasRequest) (*DeleteAnggotaKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnggotaKelas not implemented")
}
func (UnimplementedAnggotaKelasServiceServer) DeleteBatchAnggotaKelas(context.Context, *DeleteBatchAnggotaKelasRequest) (*DeleteBatchAnggotaKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBatchAnggotaKelas not implemented")
}
func (UnimplementedAnggotaKelasServiceServer) SearchAnggotaKelas(context.Context, *SearchAnggotaKelasRequest) (*SearchAnggotaKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAnggotaKelas not implemented")
}
func (UnimplementedAnggotaKelasServiceServer) FilterAnggotaKelas(context.Context, *FilterAnggotaKelasRequest) (*FilterAnggotaKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterAnggotaKelas not implemented")
}
func (UnimplementedAnggotaKelasServiceServer) mustEmbedUnimplementedAnggotaKelasServiceServer() {}
func (UnimplementedAnggotaKelasServiceServer) testEmbeddedByValue()                             {}

// UnsafeAnggotaKelasServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnggotaKelasServiceServer will
// result in compilation errors.
type UnsafeAnggotaKelasServiceServer interface {
	mustEmbedUnimplementedAnggotaKelasServiceServer()
}

func RegisterAnggotaKelasServiceServer(s grpc.ServiceRegistrar, srv AnggotaKelasServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnggotaKelasServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnggotaKelasService_ServiceDesc, srv)
}

func _AnggotaKelasService_CreateAnggotaKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnggotaKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnggotaKelasServiceServer).CreateAnggotaKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnggotaKelasService_CreateAnggotaKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnggotaKelasServiceServer).CreateAnggotaKelas(ctx, req.(*CreateAnggotaKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnggotaKelasService_CreateBanyakAnggotaKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBanyakAnggotaKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnggotaKelasServiceServer).CreateBanyakAnggotaKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnggotaKelasService_CreateBanyakAnggotaKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnggotaKelasServiceServer).CreateBanyakAnggotaKelas(ctx, req.(*CreateBanyakAnggotaKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnggotaKelasService_GetAnggotaKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnggotaKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnggotaKelasServiceServer).GetAnggotaKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnggotaKelasService_GetAnggotaKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnggotaKelasServiceServer).GetAnggotaKelas(ctx, req.(*GetAnggotaKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnggotaKelasService_UpdateAnggotaKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnggotaKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnggotaKelasServiceServer).UpdateAnggotaKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnggotaKelasService_UpdateAnggotaKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnggotaKelasServiceServer).UpdateAnggotaKelas(ctx, req.(*UpdateAnggotaKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnggotaKelasService_DeleteAnggotaKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnggotaKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnggotaKelasServiceServer).DeleteAnggotaKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnggotaKelasService_DeleteAnggotaKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnggotaKelasServiceServer).DeleteAnggotaKelas(ctx, req.(*DeleteAnggotaKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnggotaKelasService_DeleteBatchAnggotaKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBatchAnggotaKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnggotaKelasServiceServer).DeleteBatchAnggotaKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnggotaKelasService_DeleteBatchAnggotaKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnggotaKelasServiceServer).DeleteBatchAnggotaKelas(ctx, req.(*DeleteBatchAnggotaKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnggotaKelasService_SearchAnggotaKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAnggotaKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnggotaKelasServiceServer).SearchAnggotaKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnggotaKelasService_SearchAnggotaKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnggotaKelasServiceServer).SearchAnggotaKelas(ctx, req.(*SearchAnggotaKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnggotaKelasService_FilterAnggotaKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterAnggotaKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnggotaKelasServiceServer).FilterAnggotaKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnggotaKelasService_FilterAnggotaKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnggotaKelasServiceServer).FilterAnggotaKelas(ctx, req.(*FilterAnggotaKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnggotaKelasService_ServiceDesc is the grpc.ServiceDesc for AnggotaKelasService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnggotaKelasService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.AnggotaKelasService",
	HandlerType: (*AnggotaKelasServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAnggotaKelas",
			Handler:    _AnggotaKelasService_CreateAnggotaKelas_Handler,
		},
		{
			MethodName: "CreateBanyakAnggotaKelas",
			Handler:    _AnggotaKelasService_CreateBanyakAnggotaKelas_Handler,
		},
		{
			MethodName: "GetAnggotaKelas",
			Handler:    _AnggotaKelasService_GetAnggotaKelas_Handler,
		},
		{
			MethodName: "UpdateAnggotaKelas",
			Handler:    _AnggotaKelasService_UpdateAnggotaKelas_Handler,
		},
		{
			MethodName: "DeleteAnggotaKelas",
			Handler:    _AnggotaKelasService_DeleteAnggotaKelas_Handler,
		},
		{
			MethodName: "DeleteBatchAnggotaKelas",
			Handler:    _AnggotaKelasService_DeleteBatchAnggotaKelas_Handler,
		},
		{
			MethodName: "SearchAnggotaKelas",
			Handler:    _AnggotaKelasService_SearchAnggotaKelas_Handler,
		},
		{
			MethodName: "FilterAnggotaKelas",
			Handler:    _AnggotaKelasService_FilterAnggotaKelas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	PTKService_CreatePTK_FullMethodName       = "/sekolah.PTKService/CreatePTK"
	PTKService_GetPTK_FullMethodName          = "/sekolah.PTKService/GetPTK"
	PTKService_UpdatePTK_FullMethodName       = "/sekolah.PTKService/UpdatePTK"
	PTKService_DeletePTK_FullMethodName       = "/sekolah.PTKService/DeletePTK"
	PTKService_SearchPTKByName_FullMethodName = "/sekolah.PTKService/SearchPTKByName"
)

// PTKServiceClient is the client API for PTKService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =======================================
// PTK SERVICE
type PTKServiceClient interface {
	// CRUD for PTK
	CreatePTK(ctx context.Context, in *CreatePTKRequest, opts ...grpc.CallOption) (*CreatePTKResponse, error)
	GetPTK(ctx context.Context, in *GetPTKRequest, opts ...grpc.CallOption) (*GetPTKResponse, error)
	UpdatePTK(ctx context.Context, in *UpdatePTKRequest, opts ...grpc.CallOption) (*UpdatePTKResponse, error)
	DeletePTK(ctx context.Context, in *DeletePTKRequest, opts ...grpc.CallOption) (*DeletePTKResponse, error)
	SearchPTKByName(ctx context.Context, in *SearchPTKByNameRequest, opts ...grpc.CallOption) (*SearchPTKByNameResponse, error)
}

type pTKServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPTKServiceClient(cc grpc.ClientConnInterface) PTKServiceClient {
	return &pTKServiceClient{cc}
}

func (c *pTKServiceClient) CreatePTK(ctx context.Context, in *CreatePTKRequest, opts ...grpc.CallOption) (*CreatePTKResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePTKResponse)
	err := c.cc.Invoke(ctx, PTKService_CreatePTK_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pTKServiceClient) GetPTK(ctx context.Context, in *GetPTKRequest, opts ...grpc.CallOption) (*GetPTKResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPTKResponse)
	err := c.cc.Invoke(ctx, PTKService_GetPTK_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pTKServiceClient) UpdatePTK(ctx context.Context, in *UpdatePTKRequest, opts ...grpc.CallOption) (*UpdatePTKResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePTKResponse)
	err := c.cc.Invoke(ctx, PTKService_UpdatePTK_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pTKServiceClient) DeletePTK(ctx context.Context, in *DeletePTKRequest, opts ...grpc.CallOption) (*DeletePTKResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePTKResponse)
	err := c.cc.Invoke(ctx, PTKService_DeletePTK_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pTKServiceClient) SearchPTKByName(ctx context.Context, in *SearchPTKByNameRequest, opts ...grpc.CallOption) (*SearchPTKByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchPTKByNameResponse)
	err := c.cc.Invoke(ctx, PTKService_SearchPTKByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PTKServiceServer is the server API for PTKService service.
// All implementations must embed UnimplementedPTKServiceServer
// for forward compatibility.
//
// =======================================
// PTK SERVICE
type PTKServiceServer interface {
	// CRUD for PTK
	CreatePTK(context.Context, *CreatePTKRequest) (*CreatePTKResponse, error)
	GetPTK(context.Context, *GetPTKRequest) (*GetPTKResponse, error)
	UpdatePTK(context.Context, *UpdatePTKRequest) (*UpdatePTKResponse, error)
	DeletePTK(context.Context, *DeletePTKRequest) (*DeletePTKResponse, error)
	SearchPTKByName(context.Context, *SearchPTKByNameRequest) (*SearchPTKByNameResponse, error)
	mustEmbedUnimplementedPTKServiceServer()
}

// UnimplementedPTKServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPTKServiceServer struct{}

func (UnimplementedPTKServiceServer) CreatePTK(context.Context, *CreatePTKRequest) (*CreatePTKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePTK not implemented")
}
func (UnimplementedPTKServiceServer) GetPTK(context.Context, *GetPTKRequest) (*GetPTKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPTK not implemented")
}
func (UnimplementedPTKServiceServer) UpdatePTK(context.Context, *UpdatePTKRequest) (*UpdatePTKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePTK not implemented")
}
func (UnimplementedPTKServiceServer) DeletePTK(context.Context, *DeletePTKRequest) (*DeletePTKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePTK not implemented")
}
func (UnimplementedPTKServiceServer) SearchPTKByName(context.Context, *SearchPTKByNameRequest) (*SearchPTKByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPTKByName not implemented")
}
func (UnimplementedPTKServiceServer) mustEmbedUnimplementedPTKServiceServer() {}
func (UnimplementedPTKServiceServer) testEmbeddedByValue()                    {}

// UnsafePTKServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PTKServiceServer will
// result in compilation errors.
type UnsafePTKServiceServer interface {
	mustEmbedUnimplementedPTKServiceServer()
}

func RegisterPTKServiceServer(s grpc.ServiceRegistrar, srv PTKServiceServer) {
	// If the following call pancis, it indicates UnimplementedPTKServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PTKService_ServiceDesc, srv)
}

func _PTKService_CreatePTK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePTKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTKServiceServer).CreatePTK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTKService_CreatePTK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTKServiceServer).CreatePTK(ctx, req.(*CreatePTKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PTKService_GetPTK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPTKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTKServiceServer).GetPTK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTKService_GetPTK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTKServiceServer).GetPTK(ctx, req.(*GetPTKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PTKService_UpdatePTK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePTKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTKServiceServer).UpdatePTK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTKService_UpdatePTK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTKServiceServer).UpdatePTK(ctx, req.(*UpdatePTKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PTKService_DeletePTK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePTKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTKServiceServer).DeletePTK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTKService_DeletePTK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTKServiceServer).DeletePTK(ctx, req.(*DeletePTKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PTKService_SearchPTKByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPTKByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTKServiceServer).SearchPTKByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTKService_SearchPTKByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTKServiceServer).SearchPTKByName(ctx, req.(*SearchPTKByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PTKService_ServiceDesc is the grpc.ServiceDesc for PTKService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PTKService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.PTKService",
	HandlerType: (*PTKServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePTK",
			Handler:    _PTKService_CreatePTK_Handler,
		},
		{
			MethodName: "GetPTK",
			Handler:    _PTKService_GetPTK_Handler,
		},
		{
			MethodName: "UpdatePTK",
			Handler:    _PTKService_UpdatePTK_Handler,
		},
		{
			MethodName: "DeletePTK",
			Handler:    _PTKService_DeletePTK_Handler,
		},
		{
			MethodName: "SearchPTKByName",
			Handler:    _PTKService_SearchPTKByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	PTKTerdaftarService_CreatePTKTerdaftar_FullMethodName       = "/sekolah.PTKTerdaftarService/CreatePTKTerdaftar"
	PTKTerdaftarService_CreateBanyakPTKTerdaftar_FullMethodName = "/sekolah.PTKTerdaftarService/CreateBanyakPTKTerdaftar"
	PTKTerdaftarService_GetPTKTerdaftar_FullMethodName          = "/sekolah.PTKTerdaftarService/GetPTKTerdaftar"
	PTKTerdaftarService_UpdatePTKTerdaftar_FullMethodName       = "/sekolah.PTKTerdaftarService/UpdatePTKTerdaftar"
	PTKTerdaftarService_DeletePTKTerdaftar_FullMethodName       = "/sekolah.PTKTerdaftarService/DeletePTKTerdaftar"
	PTKTerdaftarService_DeletBatchPTKTerdaftar_FullMethodName   = "/sekolah.PTKTerdaftarService/DeletBatchPTKTerdaftar"
	PTKTerdaftarService_SearchPTKTerdaftar_FullMethodName       = "/sekolah.PTKTerdaftarService/SearchPTKTerdaftar"
)

// PTKTerdaftarServiceClient is the client API for PTKTerdaftarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PTKTerdaftarServiceClient interface {
	// CRUD for PTKTerdaftar
	CreatePTKTerdaftar(ctx context.Context, in *CreatePTKTerdaftarRequest, opts ...grpc.CallOption) (*CreatePTKTerdaftarResponse, error)
	CreateBanyakPTKTerdaftar(ctx context.Context, in *CreateBanyakPTKTerdaftarRequest, opts ...grpc.CallOption) (*CreateBanyakPTKTerdaftarResponse, error)
	GetPTKTerdaftar(ctx context.Context, in *GetPTKTerdaftarRequest, opts ...grpc.CallOption) (*GetPTKTerdaftarResponse, error)
	UpdatePTKTerdaftar(ctx context.Context, in *UpdatePTKTerdaftarRequest, opts ...grpc.CallOption) (*UpdatePTKTerdaftarResponse, error)
	DeletePTKTerdaftar(ctx context.Context, in *DeletePTKTerdaftarRequest, opts ...grpc.CallOption) (*DeletePTKTerdaftarResponse, error)
	DeletBatchPTKTerdaftar(ctx context.Context, in *DeleteBatchPTKTerdaftarRequest, opts ...grpc.CallOption) (*DeleteBatchPTKTerdaftarResponse, error)
	SearchPTKTerdaftar(ctx context.Context, in *SearchPTKTerdaftarRequest, opts ...grpc.CallOption) (*SearchPTKTerdaftarResponse, error)
}

type pTKTerdaftarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPTKTerdaftarServiceClient(cc grpc.ClientConnInterface) PTKTerdaftarServiceClient {
	return &pTKTerdaftarServiceClient{cc}
}

func (c *pTKTerdaftarServiceClient) CreatePTKTerdaftar(ctx context.Context, in *CreatePTKTerdaftarRequest, opts ...grpc.CallOption) (*CreatePTKTerdaftarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePTKTerdaftarResponse)
	err := c.cc.Invoke(ctx, PTKTerdaftarService_CreatePTKTerdaftar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pTKTerdaftarServiceClient) CreateBanyakPTKTerdaftar(ctx context.Context, in *CreateBanyakPTKTerdaftarRequest, opts ...grpc.CallOption) (*CreateBanyakPTKTerdaftarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBanyakPTKTerdaftarResponse)
	err := c.cc.Invoke(ctx, PTKTerdaftarService_CreateBanyakPTKTerdaftar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pTKTerdaftarServiceClient) GetPTKTerdaftar(ctx context.Context, in *GetPTKTerdaftarRequest, opts ...grpc.CallOption) (*GetPTKTerdaftarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPTKTerdaftarResponse)
	err := c.cc.Invoke(ctx, PTKTerdaftarService_GetPTKTerdaftar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pTKTerdaftarServiceClient) UpdatePTKTerdaftar(ctx context.Context, in *UpdatePTKTerdaftarRequest, opts ...grpc.CallOption) (*UpdatePTKTerdaftarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePTKTerdaftarResponse)
	err := c.cc.Invoke(ctx, PTKTerdaftarService_UpdatePTKTerdaftar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pTKTerdaftarServiceClient) DeletePTKTerdaftar(ctx context.Context, in *DeletePTKTerdaftarRequest, opts ...grpc.CallOption) (*DeletePTKTerdaftarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePTKTerdaftarResponse)
	err := c.cc.Invoke(ctx, PTKTerdaftarService_DeletePTKTerdaftar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pTKTerdaftarServiceClient) DeletBatchPTKTerdaftar(ctx context.Context, in *DeleteBatchPTKTerdaftarRequest, opts ...grpc.CallOption) (*DeleteBatchPTKTerdaftarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBatchPTKTerdaftarResponse)
	err := c.cc.Invoke(ctx, PTKTerdaftarService_DeletBatchPTKTerdaftar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pTKTerdaftarServiceClient) SearchPTKTerdaftar(ctx context.Context, in *SearchPTKTerdaftarRequest, opts ...grpc.CallOption) (*SearchPTKTerdaftarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchPTKTerdaftarResponse)
	err := c.cc.Invoke(ctx, PTKTerdaftarService_SearchPTKTerdaftar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PTKTerdaftarServiceServer is the server API for PTKTerdaftarService service.
// All implementations must embed UnimplementedPTKTerdaftarServiceServer
// for forward compatibility.
type PTKTerdaftarServiceServer interface {
	// CRUD for PTKTerdaftar
	CreatePTKTerdaftar(context.Context, *CreatePTKTerdaftarRequest) (*CreatePTKTerdaftarResponse, error)
	CreateBanyakPTKTerdaftar(context.Context, *CreateBanyakPTKTerdaftarRequest) (*CreateBanyakPTKTerdaftarResponse, error)
	GetPTKTerdaftar(context.Context, *GetPTKTerdaftarRequest) (*GetPTKTerdaftarResponse, error)
	UpdatePTKTerdaftar(context.Context, *UpdatePTKTerdaftarRequest) (*UpdatePTKTerdaftarResponse, error)
	DeletePTKTerdaftar(context.Context, *DeletePTKTerdaftarRequest) (*DeletePTKTerdaftarResponse, error)
	DeletBatchPTKTerdaftar(context.Context, *DeleteBatchPTKTerdaftarRequest) (*DeleteBatchPTKTerdaftarResponse, error)
	SearchPTKTerdaftar(context.Context, *SearchPTKTerdaftarRequest) (*SearchPTKTerdaftarResponse, error)
	mustEmbedUnimplementedPTKTerdaftarServiceServer()
}

// UnimplementedPTKTerdaftarServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPTKTerdaftarServiceServer struct{}

func (UnimplementedPTKTerdaftarServiceServer) CreatePTKTerdaftar(context.Context, *CreatePTKTerdaftarRequest) (*CreatePTKTerdaftarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePTKTerdaftar not implemented")
}
func (UnimplementedPTKTerdaftarServiceServer) CreateBanyakPTKTerdaftar(context.Context, *CreateBanyakPTKTerdaftarRequest) (*CreateBanyakPTKTerdaftarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanyakPTKTerdaftar not implemented")
}
func (UnimplementedPTKTerdaftarServiceServer) GetPTKTerdaftar(context.Context, *GetPTKTerdaftarRequest) (*GetPTKTerdaftarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPTKTerdaftar not implemented")
}
func (UnimplementedPTKTerdaftarServiceServer) UpdatePTKTerdaftar(context.Context, *UpdatePTKTerdaftarRequest) (*UpdatePTKTerdaftarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePTKTerdaftar not implemented")
}
func (UnimplementedPTKTerdaftarServiceServer) DeletePTKTerdaftar(context.Context, *DeletePTKTerdaftarRequest) (*DeletePTKTerdaftarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePTKTerdaftar not implemented")
}
func (UnimplementedPTKTerdaftarServiceServer) DeletBatchPTKTerdaftar(context.Context, *DeleteBatchPTKTerdaftarRequest) (*DeleteBatchPTKTerdaftarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletBatchPTKTerdaftar not implemented")
}
func (UnimplementedPTKTerdaftarServiceServer) SearchPTKTerdaftar(context.Context, *SearchPTKTerdaftarRequest) (*SearchPTKTerdaftarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPTKTerdaftar not implemented")
}
func (UnimplementedPTKTerdaftarServiceServer) mustEmbedUnimplementedPTKTerdaftarServiceServer() {}
func (UnimplementedPTKTerdaftarServiceServer) testEmbeddedByValue()                             {}

// UnsafePTKTerdaftarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PTKTerdaftarServiceServer will
// result in compilation errors.
type UnsafePTKTerdaftarServiceServer interface {
	mustEmbedUnimplementedPTKTerdaftarServiceServer()
}

func RegisterPTKTerdaftarServiceServer(s grpc.ServiceRegistrar, srv PTKTerdaftarServiceServer) {
	// If the following call pancis, it indicates UnimplementedPTKTerdaftarServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PTKTerdaftarService_ServiceDesc, srv)
}

func _PTKTerdaftarService_CreatePTKTerdaftar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePTKTerdaftarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTKTerdaftarServiceServer).CreatePTKTerdaftar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTKTerdaftarService_CreatePTKTerdaftar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTKTerdaftarServiceServer).CreatePTKTerdaftar(ctx, req.(*CreatePTKTerdaftarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PTKTerdaftarService_CreateBanyakPTKTerdaftar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBanyakPTKTerdaftarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTKTerdaftarServiceServer).CreateBanyakPTKTerdaftar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTKTerdaftarService_CreateBanyakPTKTerdaftar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTKTerdaftarServiceServer).CreateBanyakPTKTerdaftar(ctx, req.(*CreateBanyakPTKTerdaftarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PTKTerdaftarService_GetPTKTerdaftar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPTKTerdaftarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTKTerdaftarServiceServer).GetPTKTerdaftar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTKTerdaftarService_GetPTKTerdaftar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTKTerdaftarServiceServer).GetPTKTerdaftar(ctx, req.(*GetPTKTerdaftarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PTKTerdaftarService_UpdatePTKTerdaftar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePTKTerdaftarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTKTerdaftarServiceServer).UpdatePTKTerdaftar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTKTerdaftarService_UpdatePTKTerdaftar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTKTerdaftarServiceServer).UpdatePTKTerdaftar(ctx, req.(*UpdatePTKTerdaftarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PTKTerdaftarService_DeletePTKTerdaftar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePTKTerdaftarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTKTerdaftarServiceServer).DeletePTKTerdaftar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTKTerdaftarService_DeletePTKTerdaftar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTKTerdaftarServiceServer).DeletePTKTerdaftar(ctx, req.(*DeletePTKTerdaftarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PTKTerdaftarService_DeletBatchPTKTerdaftar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBatchPTKTerdaftarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTKTerdaftarServiceServer).DeletBatchPTKTerdaftar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTKTerdaftarService_DeletBatchPTKTerdaftar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTKTerdaftarServiceServer).DeletBatchPTKTerdaftar(ctx, req.(*DeleteBatchPTKTerdaftarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PTKTerdaftarService_SearchPTKTerdaftar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPTKTerdaftarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTKTerdaftarServiceServer).SearchPTKTerdaftar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTKTerdaftarService_SearchPTKTerdaftar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTKTerdaftarServiceServer).SearchPTKTerdaftar(ctx, req.(*SearchPTKTerdaftarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PTKTerdaftarService_ServiceDesc is the grpc.ServiceDesc for PTKTerdaftarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PTKTerdaftarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.PTKTerdaftarService",
	HandlerType: (*PTKTerdaftarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePTKTerdaftar",
			Handler:    _PTKTerdaftarService_CreatePTKTerdaftar_Handler,
		},
		{
			MethodName: "CreateBanyakPTKTerdaftar",
			Handler:    _PTKTerdaftarService_CreateBanyakPTKTerdaftar_Handler,
		},
		{
			MethodName: "GetPTKTerdaftar",
			Handler:    _PTKTerdaftarService_GetPTKTerdaftar_Handler,
		},
		{
			MethodName: "UpdatePTKTerdaftar",
			Handler:    _PTKTerdaftarService_UpdatePTKTerdaftar_Handler,
		},
		{
			MethodName: "DeletePTKTerdaftar",
			Handler:    _PTKTerdaftarService_DeletePTKTerdaftar_Handler,
		},
		{
			MethodName: "DeletBatchPTKTerdaftar",
			Handler:    _PTKTerdaftarService_DeletBatchPTKTerdaftar_Handler,
		},
		{
			MethodName: "SearchPTKTerdaftar",
			Handler:    _PTKTerdaftarService_SearchPTKTerdaftar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	KenaikanService_CreateKenaikan_FullMethodName = "/sekolah.KenaikanService/CreateKenaikan"
	KenaikanService_GetKenaikan_FullMethodName    = "/sekolah.KenaikanService/GetKenaikan"
	KenaikanService_FilterKenaikan_FullMethodName = "/sekolah.KenaikanService/FilterKenaikan"
	KenaikanService_UpdateKenaikan_FullMethodName = "/sekolah.KenaikanService/UpdateKenaikan"
	KenaikanService_DeleteKenaikan_FullMethodName = "/sekolah.KenaikanService/DeleteKenaikan"
	KenaikanService_UploadKenaikan_FullMethodName = "/sekolah.KenaikanService/UploadKenaikan"
)

// KenaikanServiceClient is the client API for KenaikanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =========================================
// service kenaikan kelas
// =========================================
type KenaikanServiceClient interface {
	// CRUD IZAJAH
	CreateKenaikan(ctx context.Context, in *CreateKenaikanRequest, opts ...grpc.CallOption) (*CreateKenaikanResponse, error)
	GetKenaikan(ctx context.Context, in *GetKenaikanRequest, opts ...grpc.CallOption) (*GetKenaikanResponse, error)
	FilterKenaikan(ctx context.Context, in *FilterKenaikanRequest, opts ...grpc.CallOption) (*FilterKenaikanResponse, error)
	UpdateKenaikan(ctx context.Context, in *UpdateKenaikanRequest, opts ...grpc.CallOption) (*UpdateKenaikanResponse, error)
	DeleteKenaikan(ctx context.Context, in *DeleteKenaikanRequest, opts ...grpc.CallOption) (*DeleteKenaikanResponse, error)
	// UPLOAD Kenaikan
	UploadKenaikan(ctx context.Context, in *UploadKenaikanRequest, opts ...grpc.CallOption) (*UploadKenaikanResponse, error)
}

type kenaikanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKenaikanServiceClient(cc grpc.ClientConnInterface) KenaikanServiceClient {
	return &kenaikanServiceClient{cc}
}

func (c *kenaikanServiceClient) CreateKenaikan(ctx context.Context, in *CreateKenaikanRequest, opts ...grpc.CallOption) (*CreateKenaikanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKenaikanResponse)
	err := c.cc.Invoke(ctx, KenaikanService_CreateKenaikan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kenaikanServiceClient) GetKenaikan(ctx context.Context, in *GetKenaikanRequest, opts ...grpc.CallOption) (*GetKenaikanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKenaikanResponse)
	err := c.cc.Invoke(ctx, KenaikanService_GetKenaikan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kenaikanServiceClient) FilterKenaikan(ctx context.Context, in *FilterKenaikanRequest, opts ...grpc.CallOption) (*FilterKenaikanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FilterKenaikanResponse)
	err := c.cc.Invoke(ctx, KenaikanService_FilterKenaikan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kenaikanServiceClient) UpdateKenaikan(ctx context.Context, in *UpdateKenaikanRequest, opts ...grpc.CallOption) (*UpdateKenaikanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateKenaikanResponse)
	err := c.cc.Invoke(ctx, KenaikanService_UpdateKenaikan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kenaikanServiceClient) DeleteKenaikan(ctx context.Context, in *DeleteKenaikanRequest, opts ...grpc.CallOption) (*DeleteKenaikanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteKenaikanResponse)
	err := c.cc.Invoke(ctx, KenaikanService_DeleteKenaikan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kenaikanServiceClient) UploadKenaikan(ctx context.Context, in *UploadKenaikanRequest, opts ...grpc.CallOption) (*UploadKenaikanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadKenaikanResponse)
	err := c.cc.Invoke(ctx, KenaikanService_UploadKenaikan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KenaikanServiceServer is the server API for KenaikanService service.
// All implementations must embed UnimplementedKenaikanServiceServer
// for forward compatibility.
//
// =========================================
// service kenaikan kelas
// =========================================
type KenaikanServiceServer interface {
	// CRUD IZAJAH
	CreateKenaikan(context.Context, *CreateKenaikanRequest) (*CreateKenaikanResponse, error)
	GetKenaikan(context.Context, *GetKenaikanRequest) (*GetKenaikanResponse, error)
	FilterKenaikan(context.Context, *FilterKenaikanRequest) (*FilterKenaikanResponse, error)
	UpdateKenaikan(context.Context, *UpdateKenaikanRequest) (*UpdateKenaikanResponse, error)
	DeleteKenaikan(context.Context, *DeleteKenaikanRequest) (*DeleteKenaikanResponse, error)
	// UPLOAD Kenaikan
	UploadKenaikan(context.Context, *UploadKenaikanRequest) (*UploadKenaikanResponse, error)
	mustEmbedUnimplementedKenaikanServiceServer()
}

// UnimplementedKenaikanServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKenaikanServiceServer struct{}

func (UnimplementedKenaikanServiceServer) CreateKenaikan(context.Context, *CreateKenaikanRequest) (*CreateKenaikanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKenaikan not implemented")
}
func (UnimplementedKenaikanServiceServer) GetKenaikan(context.Context, *GetKenaikanRequest) (*GetKenaikanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKenaikan not implemented")
}
func (UnimplementedKenaikanServiceServer) FilterKenaikan(context.Context, *FilterKenaikanRequest) (*FilterKenaikanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterKenaikan not implemented")
}
func (UnimplementedKenaikanServiceServer) UpdateKenaikan(context.Context, *UpdateKenaikanRequest) (*UpdateKenaikanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKenaikan not implemented")
}
func (UnimplementedKenaikanServiceServer) DeleteKenaikan(context.Context, *DeleteKenaikanRequest) (*DeleteKenaikanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKenaikan not implemented")
}
func (UnimplementedKenaikanServiceServer) UploadKenaikan(context.Context, *UploadKenaikanRequest) (*UploadKenaikanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadKenaikan not implemented")
}
func (UnimplementedKenaikanServiceServer) mustEmbedUnimplementedKenaikanServiceServer() {}
func (UnimplementedKenaikanServiceServer) testEmbeddedByValue()                         {}

// UnsafeKenaikanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KenaikanServiceServer will
// result in compilation errors.
type UnsafeKenaikanServiceServer interface {
	mustEmbedUnimplementedKenaikanServiceServer()
}

func RegisterKenaikanServiceServer(s grpc.ServiceRegistrar, srv KenaikanServiceServer) {
	// If the following call pancis, it indicates UnimplementedKenaikanServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KenaikanService_ServiceDesc, srv)
}

func _KenaikanService_CreateKenaikan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKenaikanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KenaikanServiceServer).CreateKenaikan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KenaikanService_CreateKenaikan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KenaikanServiceServer).CreateKenaikan(ctx, req.(*CreateKenaikanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KenaikanService_GetKenaikan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKenaikanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KenaikanServiceServer).GetKenaikan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KenaikanService_GetKenaikan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KenaikanServiceServer).GetKenaikan(ctx, req.(*GetKenaikanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KenaikanService_FilterKenaikan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterKenaikanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KenaikanServiceServer).FilterKenaikan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KenaikanService_FilterKenaikan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KenaikanServiceServer).FilterKenaikan(ctx, req.(*FilterKenaikanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KenaikanService_UpdateKenaikan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKenaikanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KenaikanServiceServer).UpdateKenaikan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KenaikanService_UpdateKenaikan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KenaikanServiceServer).UpdateKenaikan(ctx, req.(*UpdateKenaikanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KenaikanService_DeleteKenaikan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKenaikanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KenaikanServiceServer).DeleteKenaikan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KenaikanService_DeleteKenaikan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KenaikanServiceServer).DeleteKenaikan(ctx, req.(*DeleteKenaikanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KenaikanService_UploadKenaikan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadKenaikanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KenaikanServiceServer).UploadKenaikan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KenaikanService_UploadKenaikan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KenaikanServiceServer).UploadKenaikan(ctx, req.(*UploadKenaikanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KenaikanService_ServiceDesc is the grpc.ServiceDesc for KenaikanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KenaikanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.KenaikanService",
	HandlerType: (*KenaikanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKenaikan",
			Handler:    _KenaikanService_CreateKenaikan_Handler,
		},
		{
			MethodName: "GetKenaikan",
			Handler:    _KenaikanService_GetKenaikan_Handler,
		},
		{
			MethodName: "FilterKenaikan",
			Handler:    _KenaikanService_FilterKenaikan_Handler,
		},
		{
			MethodName: "UpdateKenaikan",
			Handler:    _KenaikanService_UpdateKenaikan_Handler,
		},
		{
			MethodName: "DeleteKenaikan",
			Handler:    _KenaikanService_DeleteKenaikan_Handler,
		},
		{
			MethodName: "UploadKenaikan",
			Handler:    _KenaikanService_UploadKenaikan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	IjazahService_CreateDns_FullMethodName        = "/sekolah.IjazahService/CreateDns"
	IjazahService_UpdateDns_FullMethodName        = "/sekolah.IjazahService/UpdateDns"
	IjazahService_GetDns_FullMethodName           = "/sekolah.IjazahService/GetDns"
	IjazahService_DeleteDns_FullMethodName        = "/sekolah.IjazahService/DeleteDns"
	IjazahService_SearchDns_FullMethodName        = "/sekolah.IjazahService/SearchDns"
	IjazahService_FilterDns_FullMethodName        = "/sekolah.IjazahService/FilterDns"
	IjazahService_CreateInfoIjazah_FullMethodName = "/sekolah.IjazahService/CreateInfoIjazah"
	IjazahService_UpdateInfoIjazah_FullMethodName = "/sekolah.IjazahService/UpdateInfoIjazah"
	IjazahService_GetInfoIjazah_FullMethodName    = "/sekolah.IjazahService/GetInfoIjazah"
	IjazahService_DeleteInfoIjazah_FullMethodName = "/sekolah.IjazahService/DeleteInfoIjazah"
)

// IjazahServiceClient is the client API for IjazahService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =========================================
// service untuk Ijazah
// =========================================
type IjazahServiceClient interface {
	CreateDns(ctx context.Context, in *CreateDnsRequest, opts ...grpc.CallOption) (*CreateDnsResponse, error)
	UpdateDns(ctx context.Context, in *UpdateDnsRequest, opts ...grpc.CallOption) (*UpdateDnsResponse, error)
	GetDns(ctx context.Context, in *GetDnsRequest, opts ...grpc.CallOption) (*GetDnsResponse, error)
	DeleteDns(ctx context.Context, in *DeleteDnsRequest, opts ...grpc.CallOption) (*DeleteDnsResponse, error)
	SearchDns(ctx context.Context, in *SearchDnsRequest, opts ...grpc.CallOption) (*SearchDnsResponse, error)
	FilterDns(ctx context.Context, in *FilterDnsRequest, opts ...grpc.CallOption) (*FilterDnsResponse, error)
	// SETINGS PENSISIAN IJAZAH
	CreateInfoIjazah(ctx context.Context, in *CreateInfoIjazahRequest, opts ...grpc.CallOption) (*CreateInfoIjazahResponse, error)
	UpdateInfoIjazah(ctx context.Context, in *UpdateInfoIjazahRequest, opts ...grpc.CallOption) (*UpdateInfoIjazahResponse, error)
	GetInfoIjazah(ctx context.Context, in *GetInfoIjazahRequest, opts ...grpc.CallOption) (*GetInfoIjazahResponse, error)
	DeleteInfoIjazah(ctx context.Context, in *DeleteInfoIjazahRequest, opts ...grpc.CallOption) (*DeleteInfoIjazahResponse, error)
}

type ijazahServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIjazahServiceClient(cc grpc.ClientConnInterface) IjazahServiceClient {
	return &ijazahServiceClient{cc}
}

func (c *ijazahServiceClient) CreateDns(ctx context.Context, in *CreateDnsRequest, opts ...grpc.CallOption) (*CreateDnsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDnsResponse)
	err := c.cc.Invoke(ctx, IjazahService_CreateDns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ijazahServiceClient) UpdateDns(ctx context.Context, in *UpdateDnsRequest, opts ...grpc.CallOption) (*UpdateDnsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDnsResponse)
	err := c.cc.Invoke(ctx, IjazahService_UpdateDns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ijazahServiceClient) GetDns(ctx context.Context, in *GetDnsRequest, opts ...grpc.CallOption) (*GetDnsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDnsResponse)
	err := c.cc.Invoke(ctx, IjazahService_GetDns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ijazahServiceClient) DeleteDns(ctx context.Context, in *DeleteDnsRequest, opts ...grpc.CallOption) (*DeleteDnsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDnsResponse)
	err := c.cc.Invoke(ctx, IjazahService_DeleteDns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ijazahServiceClient) SearchDns(ctx context.Context, in *SearchDnsRequest, opts ...grpc.CallOption) (*SearchDnsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchDnsResponse)
	err := c.cc.Invoke(ctx, IjazahService_SearchDns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ijazahServiceClient) FilterDns(ctx context.Context, in *FilterDnsRequest, opts ...grpc.CallOption) (*FilterDnsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FilterDnsResponse)
	err := c.cc.Invoke(ctx, IjazahService_FilterDns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ijazahServiceClient) CreateInfoIjazah(ctx context.Context, in *CreateInfoIjazahRequest, opts ...grpc.CallOption) (*CreateInfoIjazahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInfoIjazahResponse)
	err := c.cc.Invoke(ctx, IjazahService_CreateInfoIjazah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ijazahServiceClient) UpdateInfoIjazah(ctx context.Context, in *UpdateInfoIjazahRequest, opts ...grpc.CallOption) (*UpdateInfoIjazahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInfoIjazahResponse)
	err := c.cc.Invoke(ctx, IjazahService_UpdateInfoIjazah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ijazahServiceClient) GetInfoIjazah(ctx context.Context, in *GetInfoIjazahRequest, opts ...grpc.CallOption) (*GetInfoIjazahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInfoIjazahResponse)
	err := c.cc.Invoke(ctx, IjazahService_GetInfoIjazah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ijazahServiceClient) DeleteInfoIjazah(ctx context.Context, in *DeleteInfoIjazahRequest, opts ...grpc.CallOption) (*DeleteInfoIjazahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteInfoIjazahResponse)
	err := c.cc.Invoke(ctx, IjazahService_DeleteInfoIjazah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IjazahServiceServer is the server API for IjazahService service.
// All implementations must embed UnimplementedIjazahServiceServer
// for forward compatibility.
//
// =========================================
// service untuk Ijazah
// =========================================
type IjazahServiceServer interface {
	CreateDns(context.Context, *CreateDnsRequest) (*CreateDnsResponse, error)
	UpdateDns(context.Context, *UpdateDnsRequest) (*UpdateDnsResponse, error)
	GetDns(context.Context, *GetDnsRequest) (*GetDnsResponse, error)
	DeleteDns(context.Context, *DeleteDnsRequest) (*DeleteDnsResponse, error)
	SearchDns(context.Context, *SearchDnsRequest) (*SearchDnsResponse, error)
	FilterDns(context.Context, *FilterDnsRequest) (*FilterDnsResponse, error)
	// SETINGS PENSISIAN IJAZAH
	CreateInfoIjazah(context.Context, *CreateInfoIjazahRequest) (*CreateInfoIjazahResponse, error)
	UpdateInfoIjazah(context.Context, *UpdateInfoIjazahRequest) (*UpdateInfoIjazahResponse, error)
	GetInfoIjazah(context.Context, *GetInfoIjazahRequest) (*GetInfoIjazahResponse, error)
	DeleteInfoIjazah(context.Context, *DeleteInfoIjazahRequest) (*DeleteInfoIjazahResponse, error)
	mustEmbedUnimplementedIjazahServiceServer()
}

// UnimplementedIjazahServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIjazahServiceServer struct{}

func (UnimplementedIjazahServiceServer) CreateDns(context.Context, *CreateDnsRequest) (*CreateDnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDns not implemented")
}
func (UnimplementedIjazahServiceServer) UpdateDns(context.Context, *UpdateDnsRequest) (*UpdateDnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDns not implemented")
}
func (UnimplementedIjazahServiceServer) GetDns(context.Context, *GetDnsRequest) (*GetDnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDns not implemented")
}
func (UnimplementedIjazahServiceServer) DeleteDns(context.Context, *DeleteDnsRequest) (*DeleteDnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDns not implemented")
}
func (UnimplementedIjazahServiceServer) SearchDns(context.Context, *SearchDnsRequest) (*SearchDnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDns not implemented")
}
func (UnimplementedIjazahServiceServer) FilterDns(context.Context, *FilterDnsRequest) (*FilterDnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterDns not implemented")
}
func (UnimplementedIjazahServiceServer) CreateInfoIjazah(context.Context, *CreateInfoIjazahRequest) (*CreateInfoIjazahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInfoIjazah not implemented")
}
func (UnimplementedIjazahServiceServer) UpdateInfoIjazah(context.Context, *UpdateInfoIjazahRequest) (*UpdateInfoIjazahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInfoIjazah not implemented")
}
func (UnimplementedIjazahServiceServer) GetInfoIjazah(context.Context, *GetInfoIjazahRequest) (*GetInfoIjazahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoIjazah not implemented")
}
func (UnimplementedIjazahServiceServer) DeleteInfoIjazah(context.Context, *DeleteInfoIjazahRequest) (*DeleteInfoIjazahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInfoIjazah not implemented")
}
func (UnimplementedIjazahServiceServer) mustEmbedUnimplementedIjazahServiceServer() {}
func (UnimplementedIjazahServiceServer) testEmbeddedByValue()                       {}

// UnsafeIjazahServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IjazahServiceServer will
// result in compilation errors.
type UnsafeIjazahServiceServer interface {
	mustEmbedUnimplementedIjazahServiceServer()
}

func RegisterIjazahServiceServer(s grpc.ServiceRegistrar, srv IjazahServiceServer) {
	// If the following call pancis, it indicates UnimplementedIjazahServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IjazahService_ServiceDesc, srv)
}

func _IjazahService_CreateDns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IjazahServiceServer).CreateDns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IjazahService_CreateDns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IjazahServiceServer).CreateDns(ctx, req.(*CreateDnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IjazahService_UpdateDns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IjazahServiceServer).UpdateDns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IjazahService_UpdateDns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IjazahServiceServer).UpdateDns(ctx, req.(*UpdateDnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IjazahService_GetDns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IjazahServiceServer).GetDns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IjazahService_GetDns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IjazahServiceServer).GetDns(ctx, req.(*GetDnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IjazahService_DeleteDns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IjazahServiceServer).DeleteDns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IjazahService_DeleteDns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IjazahServiceServer).DeleteDns(ctx, req.(*DeleteDnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IjazahService_SearchDns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IjazahServiceServer).SearchDns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IjazahService_SearchDns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IjazahServiceServer).SearchDns(ctx, req.(*SearchDnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IjazahService_FilterDns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterDnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IjazahServiceServer).FilterDns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IjazahService_FilterDns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IjazahServiceServer).FilterDns(ctx, req.(*FilterDnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IjazahService_CreateInfoIjazah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInfoIjazahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IjazahServiceServer).CreateInfoIjazah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IjazahService_CreateInfoIjazah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IjazahServiceServer).CreateInfoIjazah(ctx, req.(*CreateInfoIjazahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IjazahService_UpdateInfoIjazah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInfoIjazahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IjazahServiceServer).UpdateInfoIjazah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IjazahService_UpdateInfoIjazah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IjazahServiceServer).UpdateInfoIjazah(ctx, req.(*UpdateInfoIjazahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IjazahService_GetInfoIjazah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoIjazahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IjazahServiceServer).GetInfoIjazah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IjazahService_GetInfoIjazah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IjazahServiceServer).GetInfoIjazah(ctx, req.(*GetInfoIjazahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IjazahService_DeleteInfoIjazah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInfoIjazahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IjazahServiceServer).DeleteInfoIjazah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IjazahService_DeleteInfoIjazah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IjazahServiceServer).DeleteInfoIjazah(ctx, req.(*DeleteInfoIjazahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IjazahService_ServiceDesc is the grpc.ServiceDesc for IjazahService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IjazahService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.IjazahService",
	HandlerType: (*IjazahServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDns",
			Handler:    _IjazahService_CreateDns_Handler,
		},
		{
			MethodName: "UpdateDns",
			Handler:    _IjazahService_UpdateDns_Handler,
		},
		{
			MethodName: "GetDns",
			Handler:    _IjazahService_GetDns_Handler,
		},
		{
			MethodName: "DeleteDns",
			Handler:    _IjazahService_DeleteDns_Handler,
		},
		{
			MethodName: "SearchDns",
			Handler:    _IjazahService_SearchDns_Handler,
		},
		{
			MethodName: "FilterDns",
			Handler:    _IjazahService_FilterDns_Handler,
		},
		{
			MethodName: "CreateInfoIjazah",
			Handler:    _IjazahService_CreateInfoIjazah_Handler,
		},
		{
			MethodName: "UpdateInfoIjazah",
			Handler:    _IjazahService_UpdateInfoIjazah_Handler,
		},
		{
			MethodName: "GetInfoIjazah",
			Handler:    _IjazahService_GetInfoIjazah_Handler,
		},
		{
			MethodName: "DeleteInfoIjazah",
			Handler:    _IjazahService_DeleteInfoIjazah_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	TranskripNilaiService_CreateTranskripNilai_FullMethodName  = "/sekolah.TranskripNilaiService/CreateTranskripNilai"
	TranskripNilaiService_GetTranskripNilai_FullMethodName     = "/sekolah.TranskripNilaiService/GetTranskripNilai"
	TranskripNilaiService_UpdateTranskripNilai_FullMethodName  = "/sekolah.TranskripNilaiService/UpdateTranskripNilai"
	TranskripNilaiService_DeleteTranskripNilai_FullMethodName  = "/sekolah.TranskripNilaiService/DeleteTranskripNilai"
	TranskripNilaiService_UploadITranskripNilai_FullMethodName = "/sekolah.TranskripNilaiService/UploadITranskripNilai"
)

// TranskripNilaiServiceClient is the client API for TranskripNilaiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =========================================
// service untuk transkrip
// =========================================
type TranskripNilaiServiceClient interface {
	// CRUD TRANSKRIP NILAI
	CreateTranskripNilai(ctx context.Context, in *CreateTranskripNilaiRequest, opts ...grpc.CallOption) (*CreateTranskripNilaiResponse, error)
	GetTranskripNilai(ctx context.Context, in *GetTranskripNilaiRequest, opts ...grpc.CallOption) (*GetTranskripNilaiResponse, error)
	UpdateTranskripNilai(ctx context.Context, in *UpdateTranskripNilaiRequest, opts ...grpc.CallOption) (*UpdateTranskripNilaiResponse, error)
	DeleteTranskripNilai(ctx context.Context, in *DeleteTranskripNilaiRequest, opts ...grpc.CallOption) (*DeleteTranskripNilaiResponse, error)
	// UPLOAD IJAZAH DAN TRANSKRIP NILAI
	UploadITranskripNilai(ctx context.Context, in *UploadTranskripNilaiRequest, opts ...grpc.CallOption) (*UploadTranskripNilaiResponse, error)
}

type transkripNilaiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTranskripNilaiServiceClient(cc grpc.ClientConnInterface) TranskripNilaiServiceClient {
	return &transkripNilaiServiceClient{cc}
}

func (c *transkripNilaiServiceClient) CreateTranskripNilai(ctx context.Context, in *CreateTranskripNilaiRequest, opts ...grpc.CallOption) (*CreateTranskripNilaiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTranskripNilaiResponse)
	err := c.cc.Invoke(ctx, TranskripNilaiService_CreateTranskripNilai_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transkripNilaiServiceClient) GetTranskripNilai(ctx context.Context, in *GetTranskripNilaiRequest, opts ...grpc.CallOption) (*GetTranskripNilaiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTranskripNilaiResponse)
	err := c.cc.Invoke(ctx, TranskripNilaiService_GetTranskripNilai_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transkripNilaiServiceClient) UpdateTranskripNilai(ctx context.Context, in *UpdateTranskripNilaiRequest, opts ...grpc.CallOption) (*UpdateTranskripNilaiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTranskripNilaiResponse)
	err := c.cc.Invoke(ctx, TranskripNilaiService_UpdateTranskripNilai_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transkripNilaiServiceClient) DeleteTranskripNilai(ctx context.Context, in *DeleteTranskripNilaiRequest, opts ...grpc.CallOption) (*DeleteTranskripNilaiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTranskripNilaiResponse)
	err := c.cc.Invoke(ctx, TranskripNilaiService_DeleteTranskripNilai_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transkripNilaiServiceClient) UploadITranskripNilai(ctx context.Context, in *UploadTranskripNilaiRequest, opts ...grpc.CallOption) (*UploadTranskripNilaiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadTranskripNilaiResponse)
	err := c.cc.Invoke(ctx, TranskripNilaiService_UploadITranskripNilai_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranskripNilaiServiceServer is the server API for TranskripNilaiService service.
// All implementations must embed UnimplementedTranskripNilaiServiceServer
// for forward compatibility.
//
// =========================================
// service untuk transkrip
// =========================================
type TranskripNilaiServiceServer interface {
	// CRUD TRANSKRIP NILAI
	CreateTranskripNilai(context.Context, *CreateTranskripNilaiRequest) (*CreateTranskripNilaiResponse, error)
	GetTranskripNilai(context.Context, *GetTranskripNilaiRequest) (*GetTranskripNilaiResponse, error)
	UpdateTranskripNilai(context.Context, *UpdateTranskripNilaiRequest) (*UpdateTranskripNilaiResponse, error)
	DeleteTranskripNilai(context.Context, *DeleteTranskripNilaiRequest) (*DeleteTranskripNilaiResponse, error)
	// UPLOAD IJAZAH DAN TRANSKRIP NILAI
	UploadITranskripNilai(context.Context, *UploadTranskripNilaiRequest) (*UploadTranskripNilaiResponse, error)
	mustEmbedUnimplementedTranskripNilaiServiceServer()
}

// UnimplementedTranskripNilaiServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTranskripNilaiServiceServer struct{}

func (UnimplementedTranskripNilaiServiceServer) CreateTranskripNilai(context.Context, *CreateTranskripNilaiRequest) (*CreateTranskripNilaiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTranskripNilai not implemented")
}
func (UnimplementedTranskripNilaiServiceServer) GetTranskripNilai(context.Context, *GetTranskripNilaiRequest) (*GetTranskripNilaiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTranskripNilai not implemented")
}
func (UnimplementedTranskripNilaiServiceServer) UpdateTranskripNilai(context.Context, *UpdateTranskripNilaiRequest) (*UpdateTranskripNilaiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTranskripNilai not implemented")
}
func (UnimplementedTranskripNilaiServiceServer) DeleteTranskripNilai(context.Context, *DeleteTranskripNilaiRequest) (*DeleteTranskripNilaiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTranskripNilai not implemented")
}
func (UnimplementedTranskripNilaiServiceServer) UploadITranskripNilai(context.Context, *UploadTranskripNilaiRequest) (*UploadTranskripNilaiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadITranskripNilai not implemented")
}
func (UnimplementedTranskripNilaiServiceServer) mustEmbedUnimplementedTranskripNilaiServiceServer() {}
func (UnimplementedTranskripNilaiServiceServer) testEmbeddedByValue()                               {}

// UnsafeTranskripNilaiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TranskripNilaiServiceServer will
// result in compilation errors.
type UnsafeTranskripNilaiServiceServer interface {
	mustEmbedUnimplementedTranskripNilaiServiceServer()
}

func RegisterTranskripNilaiServiceServer(s grpc.ServiceRegistrar, srv TranskripNilaiServiceServer) {
	// If the following call pancis, it indicates UnimplementedTranskripNilaiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TranskripNilaiService_ServiceDesc, srv)
}

func _TranskripNilaiService_CreateTranskripNilai_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTranskripNilaiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranskripNilaiServiceServer).CreateTranskripNilai(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranskripNilaiService_CreateTranskripNilai_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranskripNilaiServiceServer).CreateTranskripNilai(ctx, req.(*CreateTranskripNilaiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranskripNilaiService_GetTranskripNilai_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTranskripNilaiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranskripNilaiServiceServer).GetTranskripNilai(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranskripNilaiService_GetTranskripNilai_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranskripNilaiServiceServer).GetTranskripNilai(ctx, req.(*GetTranskripNilaiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranskripNilaiService_UpdateTranskripNilai_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTranskripNilaiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranskripNilaiServiceServer).UpdateTranskripNilai(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranskripNilaiService_UpdateTranskripNilai_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranskripNilaiServiceServer).UpdateTranskripNilai(ctx, req.(*UpdateTranskripNilaiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranskripNilaiService_DeleteTranskripNilai_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTranskripNilaiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranskripNilaiServiceServer).DeleteTranskripNilai(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranskripNilaiService_DeleteTranskripNilai_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranskripNilaiServiceServer).DeleteTranskripNilai(ctx, req.(*DeleteTranskripNilaiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranskripNilaiService_UploadITranskripNilai_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadTranskripNilaiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranskripNilaiServiceServer).UploadITranskripNilai(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranskripNilaiService_UploadITranskripNilai_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranskripNilaiServiceServer).UploadITranskripNilai(ctx, req.(*UploadTranskripNilaiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TranskripNilaiService_ServiceDesc is the grpc.ServiceDesc for TranskripNilaiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TranskripNilaiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.TranskripNilaiService",
	HandlerType: (*TranskripNilaiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTranskripNilai",
			Handler:    _TranskripNilaiService_CreateTranskripNilai_Handler,
		},
		{
			MethodName: "GetTranskripNilai",
			Handler:    _TranskripNilaiService_GetTranskripNilai_Handler,
		},
		{
			MethodName: "UpdateTranskripNilai",
			Handler:    _TranskripNilaiService_UpdateTranskripNilai_Handler,
		},
		{
			MethodName: "DeleteTranskripNilai",
			Handler:    _TranskripNilaiService_DeleteTranskripNilai_Handler,
		},
		{
			MethodName: "UploadITranskripNilai",
			Handler:    _TranskripNilaiService_UploadITranskripNilai_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	DownloadService_DownloadSekolahService_FullMethodName = "/sekolah.DownloadService/DownloadSekolahService"
)

// DownloadServiceClient is the client API for DownloadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =========================================
// =========================================
// =============DOWNLOAD SERVICE============
// =========================================
type DownloadServiceClient interface {
	// UPLOAD IJAZAH DAN TRANSKRIP NILAI
	DownloadSekolahService(ctx context.Context, in *DownloadSekolahRequest, opts ...grpc.CallOption) (*DownloadSekolahResponse, error)
}

type downloadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDownloadServiceClient(cc grpc.ClientConnInterface) DownloadServiceClient {
	return &downloadServiceClient{cc}
}

func (c *downloadServiceClient) DownloadSekolahService(ctx context.Context, in *DownloadSekolahRequest, opts ...grpc.CallOption) (*DownloadSekolahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadSekolahResponse)
	err := c.cc.Invoke(ctx, DownloadService_DownloadSekolahService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DownloadServiceServer is the server API for DownloadService service.
// All implementations must embed UnimplementedDownloadServiceServer
// for forward compatibility.
//
// =========================================
// =========================================
// =============DOWNLOAD SERVICE============
// =========================================
type DownloadServiceServer interface {
	// UPLOAD IJAZAH DAN TRANSKRIP NILAI
	DownloadSekolahService(context.Context, *DownloadSekolahRequest) (*DownloadSekolahResponse, error)
	mustEmbedUnimplementedDownloadServiceServer()
}

// UnimplementedDownloadServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDownloadServiceServer struct{}

func (UnimplementedDownloadServiceServer) DownloadSekolahService(context.Context, *DownloadSekolahRequest) (*DownloadSekolahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadSekolahService not implemented")
}
func (UnimplementedDownloadServiceServer) mustEmbedUnimplementedDownloadServiceServer() {}
func (UnimplementedDownloadServiceServer) testEmbeddedByValue()                         {}

// UnsafeDownloadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DownloadServiceServer will
// result in compilation errors.
type UnsafeDownloadServiceServer interface {
	mustEmbedUnimplementedDownloadServiceServer()
}

func RegisterDownloadServiceServer(s grpc.ServiceRegistrar, srv DownloadServiceServer) {
	// If the following call pancis, it indicates UnimplementedDownloadServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DownloadService_ServiceDesc, srv)
}

func _DownloadService_DownloadSekolahService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadSekolahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadServiceServer).DownloadSekolahService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadService_DownloadSekolahService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadServiceServer).DownloadSekolahService(ctx, req.(*DownloadSekolahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DownloadService_ServiceDesc is the grpc.ServiceDesc for DownloadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DownloadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.DownloadService",
	HandlerType: (*DownloadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownloadSekolahService",
			Handler:    _DownloadService_DownloadSekolahService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	DashboardService_GetDashboard_FullMethodName = "/sekolah.DashboardService/GetDashboard"
)

// DashboardServiceClient is the client API for DashboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =========================================
// =============DASHBOARD SERVICE============
// =========================================
type DashboardServiceClient interface {
	GetDashboard(ctx context.Context, in *GetDashboardRequest, opts ...grpc.CallOption) (*GetDashboardResponse, error)
}

type dashboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardServiceClient(cc grpc.ClientConnInterface) DashboardServiceClient {
	return &dashboardServiceClient{cc}
}

func (c *dashboardServiceClient) GetDashboard(ctx context.Context, in *GetDashboardRequest, opts ...grpc.CallOption) (*GetDashboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDashboardResponse)
	err := c.cc.Invoke(ctx, DashboardService_GetDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardServiceServer is the server API for DashboardService service.
// All implementations must embed UnimplementedDashboardServiceServer
// for forward compatibility.
//
// =========================================
// =============DASHBOARD SERVICE============
// =========================================
type DashboardServiceServer interface {
	GetDashboard(context.Context, *GetDashboardRequest) (*GetDashboardResponse, error)
	mustEmbedUnimplementedDashboardServiceServer()
}

// UnimplementedDashboardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDashboardServiceServer struct{}

func (UnimplementedDashboardServiceServer) GetDashboard(context.Context, *GetDashboardRequest) (*GetDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboard not implemented")
}
func (UnimplementedDashboardServiceServer) mustEmbedUnimplementedDashboardServiceServer() {}
func (UnimplementedDashboardServiceServer) testEmbeddedByValue()                          {}

// UnsafeDashboardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardServiceServer will
// result in compilation errors.
type UnsafeDashboardServiceServer interface {
	mustEmbedUnimplementedDashboardServiceServer()
}

func RegisterDashboardServiceServer(s grpc.ServiceRegistrar, srv DashboardServiceServer) {
	// If the following call pancis, it indicates UnimplementedDashboardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DashboardService_ServiceDesc, srv)
}

func _DashboardService_GetDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_GetDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetDashboard(ctx, req.(*GetDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DashboardService_ServiceDesc is the grpc.ServiceDesc for DashboardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DashboardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.DashboardService",
	HandlerType: (*DashboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDashboard",
			Handler:    _DashboardService_GetDashboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	ReferensiService_GetBentukPendidikan_FullMethodName  = "/sekolah.ReferensiService/GetBentukPendidikan"
	ReferensiService_GetJenjang_FullMethodName           = "/sekolah.ReferensiService/GetJenjang"
	ReferensiService_GetTingkatPendidikan_FullMethodName = "/sekolah.ReferensiService/GetTingkatPendidikan"
	ReferensiService_GetStatusKepemilikan_FullMethodName = "/sekolah.ReferensiService/GetStatusKepemilikan"
	ReferensiService_GetKurikulum_FullMethodName         = "/sekolah.ReferensiService/GetKurikulum"
	ReferensiService_GetBidangKeahlian_FullMethodName    = "/sekolah.ReferensiService/GetBidangKeahlian"
	ReferensiService_GetProgramKeahlian_FullMethodName   = "/sekolah.ReferensiService/GetProgramKeahlian"
	ReferensiService_GetJurusan_FullMethodName           = "/sekolah.ReferensiService/GetJurusan"
	ReferensiService_GetMapel_FullMethodName             = "/sekolah.ReferensiService/GetMapel"
	ReferensiService_GetMapelKurikulum_FullMethodName    = "/sekolah.ReferensiService/GetMapelKurikulum"
	ReferensiService_UpdateMapelKurikulum_FullMethodName = "/sekolah.ReferensiService/UpdateMapelKurikulum"
	ReferensiService_GetGelarAkademik_FullMethodName     = "/sekolah.ReferensiService/GetGelarAkademik"
)

// ReferensiServiceClient is the client API for ReferensiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =========================================
// =============Tabel Referensi=============
// =========================================
type ReferensiServiceClient interface {
	GetBentukPendidikan(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetBentukPendidikanResponse, error)
	GetJenjang(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetJenjangResponse, error)
	GetTingkatPendidikan(ctx context.Context, in *GetTingkatPendidikanRequest, opts ...grpc.CallOption) (*GetTingkatPendidikanResponse, error)
	GetStatusKepemilikan(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetStatusKepemilikanResponse, error)
	GetKurikulum(ctx context.Context, in *GetKurikulumRequest, opts ...grpc.CallOption) (*GetKurikulumResponse, error)
	GetBidangKeahlian(ctx context.Context, in *GetBidangKeahlianRequest, opts ...grpc.CallOption) (*GetBidangKeahlianResponse, error)
	GetProgramKeahlian(ctx context.Context, in *GetProgramKeahlianRequest, opts ...grpc.CallOption) (*GetProgramKeahlianResponse, error)
	GetJurusan(ctx context.Context, in *GetJurusanRequest, opts ...grpc.CallOption) (*GetJurusanResponse, error)
	GetMapel(ctx context.Context, in *GetMapelRequest, opts ...grpc.CallOption) (*GetMapelResponse, error)
	GetMapelKurikulum(ctx context.Context, in *GetMapelKurikulumRequest, opts ...grpc.CallOption) (*GetMapelKurikulumResponse, error)
	UpdateMapelKurikulum(ctx context.Context, in *UpdateMapelKurikulumRequest, opts ...grpc.CallOption) (*UpdateMapelKurikulumResponse, error)
	GetGelarAkademik(ctx context.Context, in *GetGelarAkademikRequest, opts ...grpc.CallOption) (*GetGelarAkademikResponse, error)
}

type referensiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReferensiServiceClient(cc grpc.ClientConnInterface) ReferensiServiceClient {
	return &referensiServiceClient{cc}
}

func (c *referensiServiceClient) GetBentukPendidikan(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetBentukPendidikanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBentukPendidikanResponse)
	err := c.cc.Invoke(ctx, ReferensiService_GetBentukPendidikan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referensiServiceClient) GetJenjang(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetJenjangResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJenjangResponse)
	err := c.cc.Invoke(ctx, ReferensiService_GetJenjang_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referensiServiceClient) GetTingkatPendidikan(ctx context.Context, in *GetTingkatPendidikanRequest, opts ...grpc.CallOption) (*GetTingkatPendidikanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTingkatPendidikanResponse)
	err := c.cc.Invoke(ctx, ReferensiService_GetTingkatPendidikan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referensiServiceClient) GetStatusKepemilikan(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetStatusKepemilikanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusKepemilikanResponse)
	err := c.cc.Invoke(ctx, ReferensiService_GetStatusKepemilikan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referensiServiceClient) GetKurikulum(ctx context.Context, in *GetKurikulumRequest, opts ...grpc.CallOption) (*GetKurikulumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKurikulumResponse)
	err := c.cc.Invoke(ctx, ReferensiService_GetKurikulum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referensiServiceClient) GetBidangKeahlian(ctx context.Context, in *GetBidangKeahlianRequest, opts ...grpc.CallOption) (*GetBidangKeahlianResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBidangKeahlianResponse)
	err := c.cc.Invoke(ctx, ReferensiService_GetBidangKeahlian_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referensiServiceClient) GetProgramKeahlian(ctx context.Context, in *GetProgramKeahlianRequest, opts ...grpc.CallOption) (*GetProgramKeahlianResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProgramKeahlianResponse)
	err := c.cc.Invoke(ctx, ReferensiService_GetProgramKeahlian_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referensiServiceClient) GetJurusan(ctx context.Context, in *GetJurusanRequest, opts ...grpc.CallOption) (*GetJurusanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJurusanResponse)
	err := c.cc.Invoke(ctx, ReferensiService_GetJurusan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referensiServiceClient) GetMapel(ctx context.Context, in *GetMapelRequest, opts ...grpc.CallOption) (*GetMapelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMapelResponse)
	err := c.cc.Invoke(ctx, ReferensiService_GetMapel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referensiServiceClient) GetMapelKurikulum(ctx context.Context, in *GetMapelKurikulumRequest, opts ...grpc.CallOption) (*GetMapelKurikulumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMapelKurikulumResponse)
	err := c.cc.Invoke(ctx, ReferensiService_GetMapelKurikulum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referensiServiceClient) UpdateMapelKurikulum(ctx context.Context, in *UpdateMapelKurikulumRequest, opts ...grpc.CallOption) (*UpdateMapelKurikulumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMapelKurikulumResponse)
	err := c.cc.Invoke(ctx, ReferensiService_UpdateMapelKurikulum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referensiServiceClient) GetGelarAkademik(ctx context.Context, in *GetGelarAkademikRequest, opts ...grpc.CallOption) (*GetGelarAkademikResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGelarAkademikResponse)
	err := c.cc.Invoke(ctx, ReferensiService_GetGelarAkademik_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReferensiServiceServer is the server API for ReferensiService service.
// All implementations must embed UnimplementedReferensiServiceServer
// for forward compatibility.
//
// =========================================
// =============Tabel Referensi=============
// =========================================
type ReferensiServiceServer interface {
	GetBentukPendidikan(context.Context, *Empty) (*GetBentukPendidikanResponse, error)
	GetJenjang(context.Context, *Empty) (*GetJenjangResponse, error)
	GetTingkatPendidikan(context.Context, *GetTingkatPendidikanRequest) (*GetTingkatPendidikanResponse, error)
	GetStatusKepemilikan(context.Context, *Empty) (*GetStatusKepemilikanResponse, error)
	GetKurikulum(context.Context, *GetKurikulumRequest) (*GetKurikulumResponse, error)
	GetBidangKeahlian(context.Context, *GetBidangKeahlianRequest) (*GetBidangKeahlianResponse, error)
	GetProgramKeahlian(context.Context, *GetProgramKeahlianRequest) (*GetProgramKeahlianResponse, error)
	GetJurusan(context.Context, *GetJurusanRequest) (*GetJurusanResponse, error)
	GetMapel(context.Context, *GetMapelRequest) (*GetMapelResponse, error)
	GetMapelKurikulum(context.Context, *GetMapelKurikulumRequest) (*GetMapelKurikulumResponse, error)
	UpdateMapelKurikulum(context.Context, *UpdateMapelKurikulumRequest) (*UpdateMapelKurikulumResponse, error)
	GetGelarAkademik(context.Context, *GetGelarAkademikRequest) (*GetGelarAkademikResponse, error)
	mustEmbedUnimplementedReferensiServiceServer()
}

// UnimplementedReferensiServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReferensiServiceServer struct{}

func (UnimplementedReferensiServiceServer) GetBentukPendidikan(context.Context, *Empty) (*GetBentukPendidikanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBentukPendidikan not implemented")
}
func (UnimplementedReferensiServiceServer) GetJenjang(context.Context, *Empty) (*GetJenjangResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJenjang not implemented")
}
func (UnimplementedReferensiServiceServer) GetTingkatPendidikan(context.Context, *GetTingkatPendidikanRequest) (*GetTingkatPendidikanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTingkatPendidikan not implemented")
}
func (UnimplementedReferensiServiceServer) GetStatusKepemilikan(context.Context, *Empty) (*GetStatusKepemilikanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusKepemilikan not implemented")
}
func (UnimplementedReferensiServiceServer) GetKurikulum(context.Context, *GetKurikulumRequest) (*GetKurikulumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKurikulum not implemented")
}
func (UnimplementedReferensiServiceServer) GetBidangKeahlian(context.Context, *GetBidangKeahlianRequest) (*GetBidangKeahlianResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBidangKeahlian not implemented")
}
func (UnimplementedReferensiServiceServer) GetProgramKeahlian(context.Context, *GetProgramKeahlianRequest) (*GetProgramKeahlianResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgramKeahlian not implemented")
}
func (UnimplementedReferensiServiceServer) GetJurusan(context.Context, *GetJurusanRequest) (*GetJurusanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJurusan not implemented")
}
func (UnimplementedReferensiServiceServer) GetMapel(context.Context, *GetMapelRequest) (*GetMapelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapel not implemented")
}
func (UnimplementedReferensiServiceServer) GetMapelKurikulum(context.Context, *GetMapelKurikulumRequest) (*GetMapelKurikulumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapelKurikulum not implemented")
}
func (UnimplementedReferensiServiceServer) UpdateMapelKurikulum(context.Context, *UpdateMapelKurikulumRequest) (*UpdateMapelKurikulumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMapelKurikulum not implemented")
}
func (UnimplementedReferensiServiceServer) GetGelarAkademik(context.Context, *GetGelarAkademikRequest) (*GetGelarAkademikResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGelarAkademik not implemented")
}
func (UnimplementedReferensiServiceServer) mustEmbedUnimplementedReferensiServiceServer() {}
func (UnimplementedReferensiServiceServer) testEmbeddedByValue()                          {}

// UnsafeReferensiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReferensiServiceServer will
// result in compilation errors.
type UnsafeReferensiServiceServer interface {
	mustEmbedUnimplementedReferensiServiceServer()
}

func RegisterReferensiServiceServer(s grpc.ServiceRegistrar, srv ReferensiServiceServer) {
	// If the following call pancis, it indicates UnimplementedReferensiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReferensiService_ServiceDesc, srv)
}

func _ReferensiService_GetBentukPendidikan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferensiServiceServer).GetBentukPendidikan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferensiService_GetBentukPendidikan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferensiServiceServer).GetBentukPendidikan(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferensiService_GetJenjang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferensiServiceServer).GetJenjang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferensiService_GetJenjang_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferensiServiceServer).GetJenjang(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferensiService_GetTingkatPendidikan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTingkatPendidikanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferensiServiceServer).GetTingkatPendidikan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferensiService_GetTingkatPendidikan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferensiServiceServer).GetTingkatPendidikan(ctx, req.(*GetTingkatPendidikanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferensiService_GetStatusKepemilikan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferensiServiceServer).GetStatusKepemilikan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferensiService_GetStatusKepemilikan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferensiServiceServer).GetStatusKepemilikan(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferensiService_GetKurikulum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKurikulumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferensiServiceServer).GetKurikulum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferensiService_GetKurikulum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferensiServiceServer).GetKurikulum(ctx, req.(*GetKurikulumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferensiService_GetBidangKeahlian_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBidangKeahlianRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferensiServiceServer).GetBidangKeahlian(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferensiService_GetBidangKeahlian_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferensiServiceServer).GetBidangKeahlian(ctx, req.(*GetBidangKeahlianRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferensiService_GetProgramKeahlian_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgramKeahlianRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferensiServiceServer).GetProgramKeahlian(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferensiService_GetProgramKeahlian_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferensiServiceServer).GetProgramKeahlian(ctx, req.(*GetProgramKeahlianRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferensiService_GetJurusan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJurusanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferensiServiceServer).GetJurusan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferensiService_GetJurusan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferensiServiceServer).GetJurusan(ctx, req.(*GetJurusanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferensiService_GetMapel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferensiServiceServer).GetMapel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferensiService_GetMapel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferensiServiceServer).GetMapel(ctx, req.(*GetMapelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferensiService_GetMapelKurikulum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapelKurikulumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferensiServiceServer).GetMapelKurikulum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferensiService_GetMapelKurikulum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferensiServiceServer).GetMapelKurikulum(ctx, req.(*GetMapelKurikulumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferensiService_UpdateMapelKurikulum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMapelKurikulumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferensiServiceServer).UpdateMapelKurikulum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferensiService_UpdateMapelKurikulum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferensiServiceServer).UpdateMapelKurikulum(ctx, req.(*UpdateMapelKurikulumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferensiService_GetGelarAkademik_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGelarAkademikRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferensiServiceServer).GetGelarAkademik(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferensiService_GetGelarAkademik_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferensiServiceServer).GetGelarAkademik(ctx, req.(*GetGelarAkademikRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReferensiService_ServiceDesc is the grpc.ServiceDesc for ReferensiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReferensiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.ReferensiService",
	HandlerType: (*ReferensiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBentukPendidikan",
			Handler:    _ReferensiService_GetBentukPendidikan_Handler,
		},
		{
			MethodName: "GetJenjang",
			Handler:    _ReferensiService_GetJenjang_Handler,
		},
		{
			MethodName: "GetTingkatPendidikan",
			Handler:    _ReferensiService_GetTingkatPendidikan_Handler,
		},
		{
			MethodName: "GetStatusKepemilikan",
			Handler:    _ReferensiService_GetStatusKepemilikan_Handler,
		},
		{
			MethodName: "GetKurikulum",
			Handler:    _ReferensiService_GetKurikulum_Handler,
		},
		{
			MethodName: "GetBidangKeahlian",
			Handler:    _ReferensiService_GetBidangKeahlian_Handler,
		},
		{
			MethodName: "GetProgramKeahlian",
			Handler:    _ReferensiService_GetProgramKeahlian_Handler,
		},
		{
			MethodName: "GetJurusan",
			Handler:    _ReferensiService_GetJurusan_Handler,
		},
		{
			MethodName: "GetMapel",
			Handler:    _ReferensiService_GetMapel_Handler,
		},
		{
			MethodName: "GetMapelKurikulum",
			Handler:    _ReferensiService_GetMapelKurikulum_Handler,
		},
		{
			MethodName: "UpdateMapelKurikulum",
			Handler:    _ReferensiService_UpdateMapelKurikulum_Handler,
		},
		{
			MethodName: "GetGelarAkademik",
			Handler:    _ReferensiService_GetGelarAkademik_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	PembelajaranService_CreatePembelajaran_FullMethodName       = "/sekolah.PembelajaranService/CreatePembelajaran"
	PembelajaranService_CreateBanyakPembelajaran_FullMethodName = "/sekolah.PembelajaranService/CreateBanyakPembelajaran"
	PembelajaranService_GetPembelajaran_FullMethodName          = "/sekolah.PembelajaranService/GetPembelajaran"
	PembelajaranService_UpdatePembelajaran_FullMethodName       = "/sekolah.PembelajaranService/UpdatePembelajaran"
	PembelajaranService_DeletePembelajaran_FullMethodName       = "/sekolah.PembelajaranService/DeletePembelajaran"
)

// PembelajaranServiceClient is the client API for PembelajaranService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MATA PELAJARAN SERVICE
type PembelajaranServiceClient interface {
	// CRUD for Pembelajaran
	CreatePembelajaran(ctx context.Context, in *CreatePembelajaranRequest, opts ...grpc.CallOption) (*CreatePembelajaranResponse, error)
	CreateBanyakPembelajaran(ctx context.Context, in *CreateBanyakPembelajaranRequest, opts ...grpc.CallOption) (*CreateBanyakPembelajaranResponse, error)
	GetPembelajaran(ctx context.Context, in *GetPembelajaranRequest, opts ...grpc.CallOption) (*GetPembelajaranResponse, error)
	UpdatePembelajaran(ctx context.Context, in *UpdatePembelajaranRequest, opts ...grpc.CallOption) (*UpdatePembelajaranResponse, error)
	DeletePembelajaran(ctx context.Context, in *DeletePembelajaranRequest, opts ...grpc.CallOption) (*DeletePembelajaranResponse, error)
}

type pembelajaranServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPembelajaranServiceClient(cc grpc.ClientConnInterface) PembelajaranServiceClient {
	return &pembelajaranServiceClient{cc}
}

func (c *pembelajaranServiceClient) CreatePembelajaran(ctx context.Context, in *CreatePembelajaranRequest, opts ...grpc.CallOption) (*CreatePembelajaranResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePembelajaranResponse)
	err := c.cc.Invoke(ctx, PembelajaranService_CreatePembelajaran_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pembelajaranServiceClient) CreateBanyakPembelajaran(ctx context.Context, in *CreateBanyakPembelajaranRequest, opts ...grpc.CallOption) (*CreateBanyakPembelajaranResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBanyakPembelajaranResponse)
	err := c.cc.Invoke(ctx, PembelajaranService_CreateBanyakPembelajaran_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pembelajaranServiceClient) GetPembelajaran(ctx context.Context, in *GetPembelajaranRequest, opts ...grpc.CallOption) (*GetPembelajaranResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPembelajaranResponse)
	err := c.cc.Invoke(ctx, PembelajaranService_GetPembelajaran_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pembelajaranServiceClient) UpdatePembelajaran(ctx context.Context, in *UpdatePembelajaranRequest, opts ...grpc.CallOption) (*UpdatePembelajaranResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePembelajaranResponse)
	err := c.cc.Invoke(ctx, PembelajaranService_UpdatePembelajaran_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pembelajaranServiceClient) DeletePembelajaran(ctx context.Context, in *DeletePembelajaranRequest, opts ...grpc.CallOption) (*DeletePembelajaranResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePembelajaranResponse)
	err := c.cc.Invoke(ctx, PembelajaranService_DeletePembelajaran_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PembelajaranServiceServer is the server API for PembelajaranService service.
// All implementations must embed UnimplementedPembelajaranServiceServer
// for forward compatibility.
//
// MATA PELAJARAN SERVICE
type PembelajaranServiceServer interface {
	// CRUD for Pembelajaran
	CreatePembelajaran(context.Context, *CreatePembelajaranRequest) (*CreatePembelajaranResponse, error)
	CreateBanyakPembelajaran(context.Context, *CreateBanyakPembelajaranRequest) (*CreateBanyakPembelajaranResponse, error)
	GetPembelajaran(context.Context, *GetPembelajaranRequest) (*GetPembelajaranResponse, error)
	UpdatePembelajaran(context.Context, *UpdatePembelajaranRequest) (*UpdatePembelajaranResponse, error)
	DeletePembelajaran(context.Context, *DeletePembelajaranRequest) (*DeletePembelajaranResponse, error)
	mustEmbedUnimplementedPembelajaranServiceServer()
}

// UnimplementedPembelajaranServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPembelajaranServiceServer struct{}

func (UnimplementedPembelajaranServiceServer) CreatePembelajaran(context.Context, *CreatePembelajaranRequest) (*CreatePembelajaranResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePembelajaran not implemented")
}
func (UnimplementedPembelajaranServiceServer) CreateBanyakPembelajaran(context.Context, *CreateBanyakPembelajaranRequest) (*CreateBanyakPembelajaranResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanyakPembelajaran not implemented")
}
func (UnimplementedPembelajaranServiceServer) GetPembelajaran(context.Context, *GetPembelajaranRequest) (*GetPembelajaranResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPembelajaran not implemented")
}
func (UnimplementedPembelajaranServiceServer) UpdatePembelajaran(context.Context, *UpdatePembelajaranRequest) (*UpdatePembelajaranResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePembelajaran not implemented")
}
func (UnimplementedPembelajaranServiceServer) DeletePembelajaran(context.Context, *DeletePembelajaranRequest) (*DeletePembelajaranResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePembelajaran not implemented")
}
func (UnimplementedPembelajaranServiceServer) mustEmbedUnimplementedPembelajaranServiceServer() {}
func (UnimplementedPembelajaranServiceServer) testEmbeddedByValue()                             {}

// UnsafePembelajaranServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PembelajaranServiceServer will
// result in compilation errors.
type UnsafePembelajaranServiceServer interface {
	mustEmbedUnimplementedPembelajaranServiceServer()
}

func RegisterPembelajaranServiceServer(s grpc.ServiceRegistrar, srv PembelajaranServiceServer) {
	// If the following call pancis, it indicates UnimplementedPembelajaranServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PembelajaranService_ServiceDesc, srv)
}

func _PembelajaranService_CreatePembelajaran_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePembelajaranRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PembelajaranServiceServer).CreatePembelajaran(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PembelajaranService_CreatePembelajaran_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PembelajaranServiceServer).CreatePembelajaran(ctx, req.(*CreatePembelajaranRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PembelajaranService_CreateBanyakPembelajaran_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBanyakPembelajaranRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PembelajaranServiceServer).CreateBanyakPembelajaran(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PembelajaranService_CreateBanyakPembelajaran_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PembelajaranServiceServer).CreateBanyakPembelajaran(ctx, req.(*CreateBanyakPembelajaranRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PembelajaranService_GetPembelajaran_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPembelajaranRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PembelajaranServiceServer).GetPembelajaran(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PembelajaranService_GetPembelajaran_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PembelajaranServiceServer).GetPembelajaran(ctx, req.(*GetPembelajaranRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PembelajaranService_UpdatePembelajaran_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePembelajaranRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PembelajaranServiceServer).UpdatePembelajaran(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PembelajaranService_UpdatePembelajaran_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PembelajaranServiceServer).UpdatePembelajaran(ctx, req.(*UpdatePembelajaranRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PembelajaranService_DeletePembelajaran_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePembelajaranRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PembelajaranServiceServer).DeletePembelajaran(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PembelajaranService_DeletePembelajaran_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PembelajaranServiceServer).DeletePembelajaran(ctx, req.(*DeletePembelajaranRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PembelajaranService_ServiceDesc is the grpc.ServiceDesc for PembelajaranService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PembelajaranService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.PembelajaranService",
	HandlerType: (*PembelajaranServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePembelajaran",
			Handler:    _PembelajaranService_CreatePembelajaran_Handler,
		},
		{
			MethodName: "CreateBanyakPembelajaran",
			Handler:    _PembelajaranService_CreateBanyakPembelajaran_Handler,
		},
		{
			MethodName: "GetPembelajaran",
			Handler:    _PembelajaranService_GetPembelajaran_Handler,
		},
		{
			MethodName: "UpdatePembelajaran",
			Handler:    _PembelajaranService_UpdatePembelajaran_Handler,
		},
		{
			MethodName: "DeletePembelajaran",
			Handler:    _PembelajaranService_DeletePembelajaran_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}
